VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END
Attribute VB_Name = "clsDX8Engine"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
'MOTOR GRÁFICO ESCRITO(mayormente) POR MENDUZ@NOICODER.COM
Option Explicit
Private Declare Function StretchBlt Lib "gdi32" (ByVal hdc As Long, ByVal X As Long, ByVal Y As Long, ByVal nWidth As Long, ByVal nHeight As Long, ByVal hSrcDC As Long, ByVal xSrc As Long, ByVal ySrc As Long, ByVal nSrcWidth As Long, ByVal nSrcHeight As Long, ByVal dwRop As Long) As Long
Private Declare Function SetStretchBltMode Lib "gdi32" (ByVal hdc As Long, ByVal hStretchMode As Long) As Long
Private Const STRETCHMODE = vbPaletteModeNone
Private Type particle
    friction As Single
    X As Single
    Y As Single
    vector_x As Single
    vector_y As Single
    angle As Single
    Grh As Grh
    alive_counter As Long
    X1 As Integer
    X2 As Integer
    Y1 As Integer
    Y2 As Integer
    vecx1 As Integer
    vecx2 As Integer
    vecy1 As Integer
    vecy2 As Integer
    life1 As Long
    life2 As Long
    fric As Integer
    spin_speedL As Single
    spin_speedH As Single
    gravity As Boolean
    grav_strength As Long
    bounce_strength As Long
    spin As Boolean
    XMove As Boolean
    YMove As Boolean
    move_x1 As Integer
    move_x2 As Integer
    move_y1 As Integer
    move_y2 As Integer
    rgb_list(0 To 3) As Long
    
    grh_resize As Boolean
    grh_resizex As Integer
    grh_resizey As Integer
End Type
Const D3DFVF_CUSTOMVERTEX = (D3DFVF_XYZRHW Or D3DFVF_DIFFUSE)
Private Type CUSTOMVERTEX
    X As Single         'x in screen space.
    Y As Single         'y in screen space.
    Z As Single         'normalized z.
    rhw As Single       'normalized z rhw.
    color As Long       'vertex color.
End Type
'Modified by: Ryan Cain (Onezero)
'Last modify date: 5/14/2003
Private Type Particle_Group
    ACTIVE As Boolean
    ID As Long
    MAP_X As Integer
    MAP_Y As Integer
    char_index As Long

    frame_counter As Single
    frame_speed As Single
    
    stream_type As Byte

    particle_stream() As particle
    particle_count As Long
    
    grh_index_list() As Long
    grh_index_count As Long
    
    alpha_blend As Boolean
    
    alive_counter As Long
    never_die As Boolean
    
    X1 As Integer
    X2 As Integer
    Y1 As Integer
    Y2 As Integer
    angle As Integer
    vecx1 As Integer
    vecx2 As Integer
    vecy1 As Integer
    vecy2 As Integer
    life1 As Long
    life2 As Long
    fric As Long
    spin_speedL As Single
    spin_speedH As Single
    gravity As Boolean
    grav_strength As Long
    bounce_strength As Long
    spin As Boolean
    XMove As Boolean
    YMove As Boolean
    move_x1 As Integer
    move_x2 As Integer
    move_y1 As Integer
    move_y2 As Integer
    rgb_list(0 To 3) As Long
    
    'Added by Juan Martín Sotuyo Dodero
    Speed As Single
    life_counter As Long
    
    'Added by David Justus
    grh_resize As Boolean
    grh_resizex As Integer
    grh_resizey As Integer
End Type


'Particle system
Dim particle_group_list() As Particle_Group
Dim particle_group_count As Long
Dim particle_group_last As Long

'Loaded Particle groups list
Dim StreamData() As Particle_Group
Dim TotalStreams As Long

Public bRunning As Boolean

Private VertexBuffer2 As Direct3DVertexBuffer8
Private Const FVF = D3DFVF_XYZRHW Or D3DFVF_TEX1 Or D3DFVF_DIFFUSE Or D3DFVF_SPECULAR
Private Const FVF2 = D3DFVF_XYZRHW Or D3DFVF_DIFFUSE Or D3DFVF_SPECULAR Or D3DFVF_TEX2
Private Const COLOR_KEY As Long = &HFF000000
Dim font_count As Long
Dim font_last As Long

Private font_list() As D3DXFont

Public Enum FontAlignment
    fa_center = DT_CENTER
    fa_top = DT_TOP
    fa_left = DT_LEFT
    fa_topleft = DT_TOP Or DT_LEFT
    fa_bottomleft = DT_BOTTOM Or DT_LEFT
    fa_bottom = DT_BOTTOM
    fa_right = DT_RIGHT
    fa_bottomright = DT_BOTTOM Or DT_RIGHT
    fa_topright = DT_TOP Or DT_RIGHT
End Enum

Dim Texture As Direct3DTexture8
Dim TransTexture As Direct3DTexture8

Private Declare Function QueryPerformanceFrequency Lib "kernel32" (lpFrequency As Currency) As Long
Private Declare Function QueryPerformanceCounter Lib "kernel32" (lpPerformanceCount As Currency) As Long

Public FPS As Integer
Private FramesPerSecCounter As Long
Private timerElapsedTime As Single
Private timerTicksPerFrame As Double
Private particletimer As Single
Public engineBaseSpeed As Single
Private lFrameTimer As Long
Private lFrameLimiter As Long
Private ScrollPixelsPerFrameX As Byte
Private ScrollPixelsPerFrameY As Byte

Private TileBufferPixelOffsetx As Byte
Private TileBufferPixelOffsety As Byte

Private MainViewTop As Integer
Private MainViewLeft As Integer
Private MainDestRect   As RECT
Private MainViewRect   As RECT
Private BackBufferRect As RECT

Private MainViewWidth As Integer
Private MainViewHeight As Integer

Private MouseTilex As Integer
Private MouseTiley As Integer
Private RLluvia(7)  As RECT  'RECT de la lluvia
Private iFrameIndex As Byte  'Frame actual de la LL
Private llTick      As Long  'Contador
Private LTLluvia(4) As Integer
Private WindowTileWidth As Integer
Private WindowTileHeight As Integer

Private HalfWindowTileWidth As Integer
Private HalfWindowTileHeight As Integer
Private Const GrhFogata As Integer = 1521


Dim bump_map_texture As Direct3DTexture8
Dim bump_map_texture_ex As Direct3DTexture8
Dim bump_map_supported As Boolean
Dim bump_map_powa As Boolean
'Sets a Grh animation to loop indefinitely.







#Const HARDCODED = False 'True ' == MÁS FPS ^^






Public Function change_day_effect(ByVal o_r As Long, ByVal og As Long, ByVal ob As Long, ByVal r_ As Long, ByVal g_ As Long, ByVal b_ As Long) As Long
Dim r As Long
Dim g As Long
Dim b As Long
r = o_r
g = og
b = ob
    
    If o_r > r_ Then
        r = r - 1
    ElseIf o_r < r_ Then
        r = r + 1
    End If

    If og > g_ Then
        g = g - 1
    ElseIf og < r Then
        g = g + 1
    End If

    If ob > b_ Then
        b = b - 1
    ElseIf og < r Then
        b = b + 1
    End If
If r > 255 Then r = 255
If g > 255 Then g = 255
If b > 255 Then b = 255
day_r_old = r
day_g_old = g
day_b_old = b

If r < 0 Or g < 0 Or b < 0 Then r = 1: g = 1: b = 1
change_day_effect = ARGB(r, g, b, 255)

End Function

Public Sub setup_ambient()

'Noche 87, 61, 43
luz_dia(0).r = 87
luz_dia(0).g = 61
luz_dia(0).b = 43
luz_dia(1).r = 87
luz_dia(1).g = 61
luz_dia(1).b = 43
luz_dia(2).r = 87
luz_dia(2).g = 61
luz_dia(2).b = 43
luz_dia(3).r = 87
luz_dia(3).g = 61
luz_dia(3).b = 43
'4 am 124,117,91
luz_dia(4).r = 124
luz_dia(4).g = 127
luz_dia(4).b = 91
'5,6 am 143,137,135
luz_dia(5).r = 143
luz_dia(5).g = 137
luz_dia(5).b = 135
luz_dia(6).r = 143
luz_dia(6).g = 137
luz_dia(6).b = 135
'7 am 212,205,207
luz_dia(7).r = 212
luz_dia(7).g = 205
luz_dia(7).b = 207
luz_dia(8).r = 212
luz_dia(8).g = 205
luz_dia(8).b = 207
luz_dia(9).r = 212
luz_dia(9).g = 205
luz_dia(9).b = 207
luz_dia(10).r = 212
luz_dia(10).g = 205
luz_dia(10).b = 207
luz_dia(11).r = 212
luz_dia(11).g = 205
luz_dia(11).b = 207
luz_dia(12).r = 212
luz_dia(12).g = 205
luz_dia(12).b = 207
'Dia 255, 255, 255
luz_dia(12).r = 255
luz_dia(12).g = 255
luz_dia(12).b = 255
luz_dia(13).r = 255
luz_dia(13).g = 255
luz_dia(13).b = 255
'Medio Dia 255, 200, 255
luz_dia(14).r = 255
luz_dia(14).g = 250
luz_dia(14).b = 255
luz_dia(15).r = 255
luz_dia(15).g = 240
luz_dia(15).b = 255
luz_dia(16).r = 255
luz_dia(16).g = 230
luz_dia(16).b = 255
'17/18 0, 100, 255
luz_dia(17).r = 230
luz_dia(17).g = 230
luz_dia(17).b = 255
'18/19 0, 100, 255
luz_dia(18).r = 230
luz_dia(18).g = 230
luz_dia(18).b = 255
'19/20 156, 142, 83
luz_dia(19).r = 156
luz_dia(19).g = 142
luz_dia(19).b = 83
luz_dia(20).r = 87
luz_dia(20).g = 61
luz_dia(20).b = 43
luz_dia(21).r = 87
luz_dia(21).g = 61
luz_dia(21).b = 43
luz_dia(22).r = 87
luz_dia(22).g = 61
luz_dia(22).b = 43
luz_dia(23).r = 87
luz_dia(23).g = 61
luz_dia(23).b = 43
luz_dia(24).r = 87
luz_dia(24).g = 61
luz_dia(24).b = 43
            
End Sub


Private Function GetElapsedTime() As Single
'**************************************************************
'Author: Aaron Perkins
'Last Modify Date: 10/07/2002
'Gets the time that past since the last call
'**************************************************************
    Dim start_time As Currency
    Static end_time As Currency
    Static timer_freq As Currency

    'Get the timer frequency
    If timer_freq = 0 Then
        QueryPerformanceFrequency timer_freq
    End If
    
    'Get current time
    Call QueryPerformanceCounter(start_time)
    
    'Calculate elapsed time
    GetElapsedTime = (start_time - end_time) / timer_freq * 1000
    
    'Get next end time
    Call QueryPerformanceCounter(end_time)
End Function



Public Sub Text_Render(ByVal Font As D3DXFont, ByVal text As String, ByVal Top As Long, ByVal Left As Long, _
                                ByVal Width As Long, ByVal Height As Long, ByVal color As Long, ByVal format As Long)
'*****************************************************
'****** Coded by Menduz (lord.yo.wo@gmail.com) *******
'*****************************************************
    Dim TextRect As RECT
    Dim ShadowRect As RECT
    
    TextRect.Top = Top
    TextRect.Left = Left
    TextRect.Bottom = Top + Height
    TextRect.Right = Left + Width
    
    D3DX.DrawText Font, color, text, TextRect, format
End Sub
Public Sub Text_Render_ext(ByVal text As String, ByVal Top As Long, ByVal Left As Long, _
                                ByVal Width As Long, ByVal Height As Long, ByVal color As Long, Optional ByVal shadow As Boolean = False, Optional ByVal center As Boolean = False)
    If center = True Then
        Call Text_Render(font_list(1), text, Top, Left, Width, Height, color, DT_CENTER)
    Else
        Call Text_Render(font_list(1), text, Top, Left, Width, Height, color, DT_TOP Or DT_LEFT)
    End If
End Sub

Private Sub Font_Make(ByVal font_index As Long, ByVal Style As String, ByVal bold As Boolean, _
                        ByVal italic As Boolean, ByVal size As Long)
    If font_index > font_last Then
        font_last = font_index
        ReDim Preserve font_list(1 To font_last)
    End If
    font_count = font_count + 1
    
    Dim font_desc As IFont
    Dim fnt As New StdFont
    fnt.name = Style
    fnt.size = size
    fnt.bold = bold
    fnt.italic = italic
    
    Set font_desc = fnt
    Set font_list(font_index) = D3DX.CreateFont(D3DDevice, font_desc.hFont)
End Sub


Public Function Font_Create(ByVal Style As String, ByVal size As Long, ByVal bold As Boolean, _
                            ByVal italic As Boolean) As Long
On Error GoTo ErrorHandler:
    Font_Create = Font_Next_Open
    Font_Make Font_Create, Style, bold, italic, size
ErrorHandler:
    Font_Create = 0
End Function

Private Function Font_Next_Open() As Long
    Font_Next_Open = font_last + 1
End Function

Private Function Font_Check(ByVal font_index As Long) As Boolean
'*****************************************************
'****** Coded by Menduz (lord.yo.wo@gmail.com) *******
'*****************************************************
    If font_index > 0 And font_index <= font_last Then
        Font_Check = True
    End If
End Function

Function MakeVector(ByVal X As Single, ByVal Y As Single, ByVal Z As Single) As D3DVECTOR
'*****************************************************
'****** Coded by Menduz (lord.yo.wo@gmail.com) *******
'*****************************************************
  MakeVector.X = X
  MakeVector.Y = Y
  MakeVector.Z = Z
End Function

Public Sub Engine_Init()
'*****************************************************
'****** Coded by Menduz (lord.yo.wo@gmail.com) *******
'*****************************************************
On Error GoTo ErrHandler:






    Dim DispMode As D3DDISPLAYMODE
    Dim DispModeBK As D3DDISPLAYMODE
    Dim D3DWindow As D3DPRESENT_PARAMETERS
    Dim ColorKeyVal As Long
    
    Set SurfaceDB = New clsTexManager
    
    Set dX = New DirectX8
    Set D3D = dX.Direct3DCreate()
    Set D3DX = New D3DX8
    
    D3D.GetAdapterDisplayMode D3DADAPTER_DEFAULT, DispMode
    D3D.GetAdapterDisplayMode D3DADAPTER_DEFAULT, DispModeBK
    
    
    With D3DWindow
        .Windowed = True
        .SwapEffect = D3DSWAPEFFECT_COPY
        .BackBufferFormat = DispMode.format
        .BackBufferWidth = frmMain.Renderer.ScaleWidth
        .BackBufferHeight = frmMain.Renderer.ScaleHeight
        .EnableAutoDepthStencil = 1
        .AutoDepthStencilFormat = D3DFMT_D16
        .hDeviceWindow = frmMain.Renderer.hWnd
    End With
    DispMode.format = D3DFMT_X8R8G8B8
    If D3D.CheckDeviceFormat(0, D3DDEVTYPE_HAL, DispMode.format, 0, D3DRTYPE_TEXTURE, D3DFMT_A8R8G8B8) = D3D_OK Then
        Dim Caps8 As D3DCAPS8
        D3D.GetDeviceCaps 0, D3DDEVTYPE_HAL, Caps8
        If (Caps8.TextureOpCaps And D3DTEXOPCAPS_DOTPRODUCT3) = D3DTEXOPCAPS_DOTPRODUCT3 Then
            bump_map_supported = True
        Else
            bump_map_supported = False
            DispMode.format = DispModeBK.format
        End If
    Else
        bump_map_supported = False
        DispMode.format = DispModeBK.format
    End If
    Set D3DDevice = D3D.CreateDevice(D3DADAPTER_DEFAULT, D3DDEVTYPE_HAL, frmMain.Renderer.hWnd, D3DCREATE_SOFTWARE_VERTEXPROCESSING, _
                                                            D3DWindow)
                                                            
                                                            
    HalfWindowTileHeight = (frmMain.Renderer.ScaleHeight / 32) \ 2
    HalfWindowTileWidth = (frmMain.Renderer.ScaleWidth / 32) \ 2
    
    TileBufferSize = 5
    TileBufferPixelOffsetx = 160
    TileBufferPixelOffsety = 160
    
    D3DDevice.SetVertexShader FVF
    
    '//Transformed and lit vertices dont need lighting
    '   so we disable it...
    D3DDevice.SetRenderState D3DRS_LIGHTING, False
    
    D3DDevice.SetRenderState D3DRS_SRCBLEND, D3DBLEND_SRCALPHA
    D3DDevice.SetRenderState D3DRS_DESTBLEND, D3DBLEND_INVSRCALPHA
    D3DDevice.SetRenderState D3DRS_ALPHABLENDENABLE, True
    
    Call SurfaceDB.Init(D3DX, D3DDevice, 134217728)

    engineBaseSpeed = 1
    

    'ReDim MapChanged(XMinMapSize To MapInfo(CurrentMap).Width, YMinMapSize To MapInfo(CurrentMap).Height) As Boolean
    
    'Set FPS value to 60 for startup
    FPS = 60
    FramesPerSecCounter = 60
    
    ScrollPixelsPerFrameX = 8
    ScrollPixelsPerFrameY = 8
    
    UserPos.X = 50
    UserPos.Y = 50
    
    MinXBorder = XMinMapSize + (frmMain.Renderer.ScaleWidth / 64)
    MaxXBorder = MapInfo(CurrentMap).Width - (frmMain.Renderer.ScaleWidth / 64)
    MinYBorder = YMinMapSize + (frmMain.Renderer.ScaleHeight / 64)
    MaxYBorder = MapInfo(CurrentMap).Height - (frmMain.Renderer.ScaleHeight / 64)
    
    'partículas
    D3DDevice.SetRenderState D3DRS_POINTSIZE, Engine_FToDW(2)
    D3DDevice.SetTextureStageState 0, D3DTSS_ALPHAOP, D3DTOP_MODULATE
    D3DDevice.SetRenderState D3DRS_POINTSPRITE_ENABLE, 1
    D3DDevice.SetRenderState D3DRS_POINTSCALE_ENABLE, 0

    Font_Create "Verdana", 8, False, 0
    
bRunning = True
Exit Sub
ErrHandler:
Debug.Print "Error Number Returned: " & Err.Number
bRunning = False
End Sub

Public Sub Engine_Deinit()
Erase MapData
Erase charlist
Set D3DDevice = Nothing
Set D3D = Nothing
Set dX = Nothing
End
End Sub


Private Function CreateTLVertex(X As Single, Y As Single, Z As Single, rhw As Single, color As Long, Specular As Long, tu As Single, tv As Single) As TLVERTEX
'*****************************************************
'****** Coded by Menduz (lord.yo.wo@gmail.com) *******
'*****************************************************
    CreateTLVertex.X = X
    CreateTLVertex.Y = Y
    CreateTLVertex.Z = Z
    CreateTLVertex.rhw = rhw
    CreateTLVertex.color = color
    CreateTLVertex.Specular = Specular
    CreateTLVertex.tu = tu
    CreateTLVertex.tv = tv
End Function

Public Sub Engine_ActFPS()
    If GetTickCount - lFrameTimer > 1000 Then
        FPS = FramesPerSecCounter
        FramesPerSecCounter = 0
        lFrameTimer = GetTickCount
    End If
End Sub
Public Sub Draw_GrhIndex(ByVal grh_index As Integer, ByVal X As Long, ByVal Y As Long)
    If grh_index <= 0 Then Exit Sub
    Dim rgb_list(3) As Long
    
    rgb_list(0) = -1
    rgb_list(1) = -1
    rgb_list(2) = -1
    rgb_list(3) = -1
    
    Device_Box_Textured_Render grh_index, _
        X, Y, _
        GrhData(grh_index).pixelWidth, GrhData(grh_index).pixelHeight, _
        rgb_list, _
        GrhData(grh_index).sX, GrhData(grh_index).sY
End Sub
Private Sub Draw_Grh(ByRef Grh As Grh, ByVal X As Integer, ByVal Y As Integer, ByVal center As Byte, ByVal Animate As Byte, Optional ByVal Alpha As Boolean, Optional ByVal MAP_X As Integer = 1, Optional ByVal MAP_Y As Integer = 1, Optional ByVal angle As Single)
    Dim CurrentGrhIndex As Integer
    If Grh.grhindex = 0 Then Exit Sub
    If Animate Then
        If Grh.Started = 1 Then
            Grh.FrameCounter = Grh.FrameCounter + (timerElapsedTime * GrhData(Grh.grhindex).NumFrames / Grh.Speed)
            If Grh.FrameCounter > GrhData(Grh.grhindex).NumFrames Then
                Grh.FrameCounter = (Grh.FrameCounter Mod GrhData(Grh.grhindex).NumFrames) + 1
                
                If Grh.Loops <> -1 Then
                    If Grh.Loops > 0 Then
                        Grh.Loops = Grh.Loops - 1
                    Else
                        Grh.Started = 0
                    End If
                End If
            End If
        End If
    End If
    If GrhData(Grh.grhindex).NumFrames > 0 Then
    If Grh.FrameCounter = 0 Then Grh.FrameCounter = 1
    'Figure out what frame to draw (always 1 if not animated)
    CurrentGrhIndex = GrhData(Grh.grhindex).Frames(Grh.FrameCounter)

    'Center Grh over X,Y pos
    If center Then
        If GrhData(CurrentGrhIndex).TileWidth <> 1 Then
            X = X - Int(GrhData(CurrentGrhIndex).TileWidth * (32 \ 2)) + 32 \ 2
        End If

        If GrhData(Grh.grhindex).TileHeight <> 1 Then
            Y = Y - Int(GrhData(CurrentGrhIndex).TileHeight * 32) + 32
        End If
    End If
    Dim antesdeluces(0 To 3) As Long
    If MAP_X = 1 And MAP_Y = 1 Or MAP_X = 0 Or MAP_Y = 0 Then
antesdeluces(0) = ColorMapa
antesdeluces(1) = ColorMapa
antesdeluces(2) = ColorMapa
antesdeluces(3) = ColorMapa
Else
antesdeluces(0) = MapData(CurrentMap).Tile(MAP_X, MAP_Y).light_value(0)
antesdeluces(1) = MapData(CurrentMap).Tile(MAP_X, MAP_Y).light_value(1)
antesdeluces(2) = MapData(CurrentMap).Tile(MAP_X, MAP_Y).light_value(2)
antesdeluces(3) = MapData(CurrentMap).Tile(MAP_X, MAP_Y).light_value(3)
End If

If antesdeluces(0) = 0 Then antesdeluces(0) = ColorMapa
If antesdeluces(1) = 0 Then antesdeluces(1) = ColorMapa
If antesdeluces(2) = 0 Then antesdeluces(2) = ColorMapa
If antesdeluces(3) = 0 Then antesdeluces(3) = ColorMapa

    Device_Box_Textured_Render CurrentGrhIndex, _
        X, Y, _
        GrhData(CurrentGrhIndex).pixelWidth, GrhData(CurrentGrhIndex).pixelHeight, _
        antesdeluces(), _
        GrhData(CurrentGrhIndex).sX, GrhData(CurrentGrhIndex).sY, _
        Alpha _
        , angle
        End If
'exits:

End Sub


Public Sub Render()

engine.Engine_ActFPS

D3DDevice.BeginScene
D3DDevice.Clear 0, ByVal 0, D3DCLEAR_TARGET, D3DColorRGBA(10, 10, 10, 255), 1#, 0

    ShowNextFrame

D3DDevice.EndScene
D3DDevice.Present ByVal 0, ByVal 0, 0, ByVal 0

lFrameLimiter = GetTickCount
FramesPerSecCounter = FramesPerSecCounter + 1
timerElapsedTime = GetElapsedTime()
timerTicksPerFrame = timerElapsedTime * engineBaseSpeed
particletimer = timerElapsedTime * 0.05
End Sub



Sub ShowNextFrame()
    Static OffsetCounterX As Single
    Static OffsetCounterY As Single
        If UserMoving Then
            '****** Move screen Left and Right if needed ******
            If AddtoUserPos.X <> 0 Then
                OffsetCounterX = OffsetCounterX - ScrollPixelsPerFrameX * AddtoUserPos.X * timerTicksPerFrame
                If Abs(OffsetCounterX) >= Abs(32 * AddtoUserPos.X) Then
                    OffsetCounterX = 0
                    AddtoUserPos.X = 0
                    UserMoving = False
                End If
            End If
            
            '****** Move screen Up and Down if needed ******
            If AddtoUserPos.Y <> 0 Then
                OffsetCounterY = OffsetCounterY - ScrollPixelsPerFrameY * AddtoUserPos.Y * timerTicksPerFrame
                If Abs(OffsetCounterY) >= Abs(32 * AddtoUserPos.Y) Then
                    OffsetCounterY = 0
                    AddtoUserPos.Y = 0
                    UserMoving = False
                End If
            End If
        End If
        
        If UserPos.X < 17 Then UserPos.X = 17
        If UserPos.Y < 14 Then UserPos.Y = 14
        If UserPos.X > MapInfo(CurrentMap).Width + 32 Then UserPos.X = MapInfo(CurrentMap).Width + 32
        If UserPos.Y > MapInfo(CurrentMap).Height + 26 Then UserPos.Y = MapInfo(CurrentMap).Height + 26
        
        Call RenderScreen(UserPos.X - AddtoUserPos.X, UserPos.Y - AddtoUserPos.Y, OffsetCounterX, OffsetCounterY)
End Sub

Sub RenderScreen(ByVal tilex As Integer, ByVal tiley As Integer, ByVal PixelOffsetx As Byte, ByVal PixelOffsety As Byte)
'**************************************************************
'Author: Aaron Perkins
'Last Modify Date: 8/14/2007
'Last modified by: Juan Martín Sotuyo Dodero (Maraxus)
'Renders everything to the viewport
'**************************************************************
   
    Dim Y                   As Integer     'Keeps track of where on map we are
    Dim X                   As Integer     'Keeps track of where on map we are
    Dim screenminY          As Long  'Start Y pos on current screen
    Dim screenmaxY          As Long  'End Y pos on current screen
    Dim screenminX          As Long  'Start X pos on current screen
    Dim screenmaxX          As Long  'End X pos on current screen
    Dim minY                As Long  'Start Y pos on current map
    Dim maxY                As Long  'End Y pos on current map
    Dim minX                As Long  'Start X pos on current map
    Dim maxX                As Long  'End X pos on current map
    Dim ScreenX             As Long  'Keeps track of where to place tile on screen
    Dim ScreenY             As Long  'Keeps track of where to place tile on screen
    Dim minXOffset          As Integer
    Dim minYOffset          As Integer
    Dim PixelOffsetXTemp    As Integer 'For centering grhs
    Dim PixelOffsetYTemp    As Integer 'For centering grhs
    Dim CurrentGrhIndex     As Integer
    Dim OffX                As Integer
    Dim OffY                As Integer
    Dim g As Grh
    Dim i As Integer

    'Figure out Ends and Starts of screen
    screenminY = tiley - HalfWindowTileHeight
    screenmaxY = tiley + HalfWindowTileHeight
    screenminX = tilex - HalfWindowTileWidth
    screenmaxX = tilex + HalfWindowTileWidth
    
    minY = screenminY - TileBufferSize
    maxY = screenmaxY + TileBufferSize
    minX = screenminX - TileBufferSize
    maxX = screenmaxX + TileBufferSize
    
    'If screenminY >= YMinMapSize Then
        screenminY = screenminY - 1
    'Else
    '    screenminY = 1
    '    ScreenY = 1
    'End If
   
    If screenmaxY <= MapInfo(CurrentMap).Height Then screenmaxY = screenmaxY + 1
   
    'If screenminX >= XMinMapSize Then
        screenminX = screenminX - 1
    'Else
    '    screenminX = 1
    '    ScreenX = 1
    'End If
  '
    If screenmaxX <= MapInfo(CurrentMap).Width Then screenmaxX = screenmaxX + 1
    
    GenerarVista
    
    
    
    Call Light_Render_Area
    
    
    For Y = screenminY - 7 To screenmaxY + 7
        For X = screenminX - 5 To screenmaxX + 5
            'Layer 1 **********************************
            If InMapBounds(X, Y) Then
                If MapData(CurrentMap).Tile(X, Y).Hora <> Hora Then
                    For i = 0 To 3
                        MapData(CurrentMap).Tile(X, Y).light_value(i) = ColorMapa
                    Next i
                    MapData(CurrentMap).Tile(X, Y).Hora = Hora
                End If
            End If
        Next X
    Next Y
    
    
    
    'Draw floor layer
    For Y = screenminY To screenmaxY
        For X = screenminX To screenmaxX
            'Layer 1 **********************************
            If InMapBounds(X, Y) Then
                If MapData(CurrentMap).Tile(X, Y).Hora <> Hora Then
                    For i = 0 To 3
                        MapData(CurrentMap).Tile(X, Y).light_value(i) = ColorMapa
                    Next i
                    MapData(CurrentMap).Tile(X, Y).Hora = Hora
                End If
            
                If MapData(CurrentMap).Tile(X, Y).Graphic(1).grhindex And (VerCapa1 Or Grabar) Then
                    Call Draw_Grh(MapData(CurrentMap).Tile(X, Y).Graphic(1), _
                            (ScreenX - 1) * 32 + PixelOffsetx, _
                            (ScreenY - 1) * 32 + PixelOffsety, _
                            0, 1, IIf(MapData(CurrentMap).Tile(X, Y).Graphic(2).grhindex > 0 And Grabar = False And VerTrans, True, False), X, Y)
                End If
                

            End If
            '******************************************
            ScreenX = ScreenX + 1
        Next X

        'Reset ScreenX to original value and increment ScreenY
        ScreenX = ScreenX - X + screenminX
        ScreenY = ScreenY + 1
    Next Y
    ScreenY = 0
    ScreenX = 0
        'Draw floor layer
    For Y = screenminY To screenmaxY
        For X = screenminX To screenmaxX
            'Layer 1 **********************************
            If InMapBounds(X, Y) Then

                
                If MapData(CurrentMap).Tile(X, Y).Graphic(2).grhindex <> 0 And (VerCapa2 Or Grabar) Then
                    Call Draw_Grh(MapData(CurrentMap).Tile(X, Y).Graphic(2), (ScreenX - 1) * 32 + PixelOffsetx, (ScreenY - 1) * 32 + PixelOffsety, 1, 1, , X, Y)
                End If
            End If
            '******************************************
            ScreenX = ScreenX + 1
        Next X

        'Reset ScreenX to original value and increment ScreenY
        ScreenX = ScreenX - X + screenminX
        ScreenY = ScreenY + 1
    Next Y
    
Dim tmpGrh As Grh
Dim tmpInt As Integer
    ScreenY = minYOffset - TileBufferSize
    For Y = minY To maxY
        ScreenX = minXOffset - TileBufferSize
        For X = minX To maxX
            If InMapBounds(X, Y) Then
                PixelOffsetXTemp = ScreenX * 32 + PixelOffsetx
                PixelOffsetYTemp = ScreenY * 32 + PixelOffsety
                With MapData(CurrentMap).Tile(X, Y)
                    '******************************************
    
                    'Object Layer **********************************
                    If .ObjGrh.grhindex <> 0 And (VerObjetos Or Grabar) Then
                        Call Draw_Grh(.ObjGrh, _
                                PixelOffsetXTemp, PixelOffsetYTemp, 1, 1, , X, Y)
                    End If
                    
                    'Char layer ************************************
                    If .CharIndex <> 0 And (VerNpcs Or Grabar) Then
                        Call Char_Render(.CharIndex, PixelOffsetXTemp, PixelOffsetYTemp, X, Y)
                    End If
                    'Char layer ************************************
                    If .NpcArea <> 0 And VerNpcs And Not Grabar Then
                        'Draw Body
                        If NpcData(.NpcArea).Body > 0 Then
                        tmpInt = BodyData(NpcData(.NpcArea).Body).Walk(SOUTH).grhindex
                        
                        tmpGrh.grhindex = tmpInt
                        tmpGrh.FrameCounter = 1
                        If tmpInt Then
                            Call Draw_Grh(tmpGrh, PixelOffsetXTemp, PixelOffsetYTemp, 1, 1, , X, Y)
                        End If
                        End If
                        If NpcData(.NpcArea).Head > 0 Then
                        tmpInt = HeadData(NpcData(.NpcArea).Head).Head(SOUTH).grhindex
                        If tmpInt Then
                            Call Draw_Grh(tmpGrh, PixelOffsetXTemp, PixelOffsetYTemp, 1, 1, , X, Y)
                        End If
                        End If
                        
                        
                    End If
                    '*************************************************
       
                    'Layer 3 *****************************************
                    If .Graphic(3).grhindex > 0 And (VerCapa3 Or Grabar) Then
                        Call Draw_Grh(.Graphic(3), _
                                PixelOffsetXTemp, PixelOffsetYTemp, 1, 1, , X, Y)
                    ElseIf .Graphic(3).grhindex < 0 And Not Grabar Then
                      
                        Call InitGrh(g, 5386)
                        Call Draw_Grh(g, _
                                PixelOffsetXTemp, PixelOffsetYTemp, 1, 1, , X, Y)
                    End If
                    '************************************************
    
                End With
            End If
            ScreenX = ScreenX + 1
        Next X
        ScreenY = ScreenY + 1
    Next Y
    ScreenY = minYOffset - 5
Dim Grh As Grh

ScreenY = minYOffset - TileBufferSize
For Y = minY To maxY
    ScreenX = minXOffset - TileBufferSize
    For X = minX To maxX
        If InMapBounds(X, Y) Then
        If MapData(CurrentMap).Tile(X, Y).particle_group_index Then
            Particle_Group_Render MapData(CurrentMap).Tile(X, Y).particle_group_index, ScreenX * 32 + PixelOffsetx, ScreenY * 32 + PixelOffsety  '+ (16)
        End If
        End If
    ScreenX = ScreenX + 1
    Next X
ScreenY = ScreenY + 1
Next Y
    
'Draw blocked tiles and grid
ScreenY = minYOffset - TileBufferSize
For Y = minY To maxY
    ScreenX = minXOffset - TileBufferSize
    For X = minX To maxX
        If InMapBounds(X, Y) Then
        'Layer 4 **********************************
        If MapData(CurrentMap).Tile(X, Y).Graphic(4).grhindex And ((VerCapa4 And Not bTecho) Or Grabar) Then
            Call Draw_Grh(MapData(CurrentMap).Tile(X, Y).Graphic(4), _
                ScreenX * 32 + PixelOffsetx, _
                ScreenY * 32 + PixelOffsety, _
                1, 1, IIf(Grabar Or Not VerTrans, False, True), X, Y)
        End If
        '**********************************
        If MapData(CurrentMap).Tile(X, Y).TileExit.Map <> 0 And VerTranslados And Not Grabar Then
            Grh.grhindex = 3
            Grh.FrameCounter = 1
            Grh.Started = 0
            Call Draw_Grh(Grh, _
                ScreenX * 32 + PixelOffsetx, _
                ScreenY * 32 + PixelOffsety, _
                1, 1, , X, Y)
        End If
        
        'Show blocked tiles
        If VerBlockeados And MapData(CurrentMap).Tile(X, Y).Blocked = 1 And Not Grabar Then
            Grh.grhindex = 4
            Grh.FrameCounter = 1
            Grh.Started = 0
            Call Draw_Grh(Grh, _
                ScreenX * 32 + PixelOffsetx, _
                ScreenY * 32 + PixelOffsety, _
                1, 1, , X, Y)
        End If
            
        If VerGrilla Then
            ' Grilla 24/11/2008 by GS
            'Call Draw_Grh(Grh, _
                ScreenX * 32 + PixelOffsetx, _
                ScreenY * 32 + PixelOffsety, _
                1, 1, , X, Y)
        End If
            
        If VerTriggers And Not Grabar Then '4978
            If MapData(CurrentMap).Tile(X, Y).Trigger > 0 Then _
                Text_Render font_list(1), MapData(CurrentMap).Tile(X, Y).Trigger, ScreenY * 32 + PixelOffsety, ScreenX * 32 + PixelOffsetx, 9, 12, &HFFFFFFFF, DT_CENTER
        End If
            
        If Seleccionando Then
            'If ScreenX >= SeleccionIX And ScreenX <= SeleccionFX And ScreenY >= SeleccionIY And ScreenY <= SeleccionFY Then
                If X >= SeleccionIX And Y >= SeleccionIY Then
                    If X <= SeleccionFX And Y <= SeleccionFY Then
                            'BackBufferSurface.SetForeColor vbGreen
                            'BackBufferSurface.SetFillStyle 1
                            'BackBufferSurface.DrawBox iPPx, iPPy, iPPx + 32, iPPy + 32
                    End If
                End If
        End If
        End If
        ScreenX = ScreenX + 1
    Next X
    ScreenY = ScreenY + 1
Next Y
If CopyState = 4 Then
'buscar aca

If CopyRect.Left > 0 And CopyRect.Right > 0 And CopyRect.Top > 0 And CopyRect.Bottom > 0 Then
For X = AddMX To 21 + AddMX
    For Y = AddMY To 19 + AddMY
        ScreenX = X + SobreX - UserPos.X + 17 - AddMX
        ScreenY = Y + SobreY - UserPos.Y + 14 - AddMY
        If X >= 0 And X <= CopyRect.Right - CopyRect.Left And Y >= 0 And Y <= CopyRect.Bottom - CopyRect.Top And X <= MapInfo(CurrentMap).Width And Y <= MapInfo(CurrentMap).Height Then
            If MapCopy(X, Y).Graphic(1).grhindex <> 0 And ScreenX >= 0 And ScreenY >= 0 Then
                'El width fue hardcodeado para speed!
                Call Draw_Grh(MapCopy(X, Y).Graphic(1), _
                            (ScreenX - 1) * 32 + PixelOffsetx, _
                            (ScreenY - 1) * 32 + PixelOffsety, _
                            0, 1, , X, Y)

            End If
            'Layer 2 **********************************
            If MapCopy(X, Y).Graphic(2).grhindex <> 0 And ScreenX >= 0 And ScreenY >= 0 Then
                Call Draw_Grh(MapCopy(X, Y).Graphic(2), _
                            (ScreenX - 1) * 32 + PixelOffsetx, _
                            (ScreenY - 1) * 32 + PixelOffsety, _
                            0, 1, , X, Y)
                        
            End If
        End If
    Next Y
Next X
End If
End If

Dim PRX As Integer, PRY As Integer, PRR As Integer, PRB As Integer
If PRect.Left = 0 Then

    PRX = MX - 1
    PRY = MY - 1
    PRR = MX
    PRB = MY
Else
    If PRect.Left >= PRect.Right Then
        PRX = PRect.Right - 1
        PRR = PRect.Left + 1
    Else
        PRX = PRect.Left
        PRR = PRect.Right
    End If
    If PRect.Top >= PRect.Bottom Then
        PRY = PRect.Bottom - 1
        PRB = PRect.Top + 1
    Else
        PRY = PRect.Top
        PRB = PRect.Bottom
    End If
End If
Dim aux As Integer
If frmMain.chkCostas.value = vbChecked Then

    For i = 1 To 3
        If MCostaV(i).grhindex > 0 Then
            aux = MCostaV(i).grhindex + (((MCostaV(i).Y + Val(frmConfigSup.DMLargo)) Mod 2) * 2) + ((MCostaV(i).X + Val(frmConfigSup.DMAncho)) Mod 2)
                    InitGrh g, aux
                    If MCostaV(i).X - UserPos.X + 20 - 9 >= 0 And MCostaV(i).Y - UserPos.Y + 19 - 10 >= 0 Then
                    Call Draw_Grh(g, (MCostaV(i).X - UserPos.X + 20 - 9) * 32 + PixelOffsetx, (MCostaV(i).Y - UserPos.Y + 19 - 10) * 32 + PixelOffsety, 0, 1)
                    End If
        End If
    Next i


Else

For X = PRX + 1 To PRR
        For Y = PRY + 1 To PRB
If frmMain.cSeleccionarSuperficie.value = True Then
              If frmMain.mnuAutoCompletarSuperficies.Checked = False Then
                    If frmConfigSup.mLargo.text = 0 Then frmConfigSup.mLargo.text = 1
                    If frmConfigSup.mAncho.text = 0 Then frmConfigSup.mAncho.text = 1
                    aux = Val(frmMain.cGrh.text) + (((Y + Val(frmConfigSup.DMLargo)) Mod frmConfigSup.mLargo.text) * frmConfigSup.mAncho.text) + ((X + Val(frmConfigSup.DMAncho)) Mod frmConfigSup.mAncho.text)
                    InitGrh g, aux
                    If X - UserPos.X + 16 >= 0 And Y - UserPos.Y + 13 >= 0 And Y - UserPos.Y + 13 < 30 And X - UserPos.X + 16 < 33 Then
                    Call Draw_Grh(g, (X - UserPos.X + 16) * 32 + PixelOffsetx, (Y - UserPos.Y + 13) * 32 + PixelOffsety, 1, 1)
                
                    End If
                    
              Else
                
                Dim tXX As Integer, tYY As Integer, j As Integer, desptile As Integer
                tXX = X
                tYY = Y
                desptile = 0
                For i = 1 To frmConfigSup.mLargo.text
                    For j = 1 To frmConfigSup.mAncho.text
                        aux = Val(frmMain.cGrh.text) + desptile
                        InitGrh g, aux
                        tXX = tXX + 1
                        desptile = desptile + 1
                        Call Draw_Grh(g, (tXX - UserPos.X + 20 - 10) * 32 + PixelOffsetx, (tYY - UserPos.Y + 19 - 10) * 32 + PixelOffsety, 0, 1)
                        
                    Next j
                    tXX = X
                    tYY = tYY + 1
                Next i
                tYY = Y
                    
                    
              End If

End If
Next Y
Next X
End If

Dim color As Long
 
color = D3DColorRGBA(255, 255, 255, 255)
 
 
If AgregarZona > 0 And ZonaR.Left > 0 And Not Grabar Then

    Call DrawBox((ZonaR.Left - minX - 1 - 4) * 32, (ZonaR.Top - minY - 1 - 4) * 32, (ZonaR.Right - minX - 4) * 32, (ZonaR.Bottom - minY - 4) * 32, color)

End If
If AgregarArea > 0 And AreaR.Left > 0 And Not Grabar Then
    Call DrawBox((AreaR.Left - minX - 1 - 4) * 32, (AreaR.Top - minY - 1 - 4) * 32, (AreaR.Right - minX - 4) * 32, (AreaR.Bottom - minY - 4) * 32, color)

End If
On Error Resume Next
If PRect.Left > 0 And PRect.Right > 0 And Not Grabar Then
    Call DrawBox((PRect.Left - minX - IIf(PRect.Left < PRect.Right, 4, 3)) * 32, (PRect.Top - minY - IIf(PRect.Top < PRect.Bottom, 4, 3)) * 32, (PRect.Right - minX - IIf(PRect.Left < PRect.Right, 4, 5)) * 32, (PRect.Bottom - minY - IIf(PRect.Top < PRect.Bottom, 4, 5)) * 32, color)
End If

If CopyState > 0 And CopyRect.Top > 0 And Not Grabar Then
    Call DrawBox((CopyRect.Left - minX - 1 - 4) * 32, (CopyRect.Top - minY - 1 - 4) * 32, (CopyRect.Right - minX - 4) * 32, (CopyRect.Bottom - minY - 4) * 32, color)
End If



If VerGrilla And Not Grabar Then
color = D3DColorRGBA(255, 255, 255, 255)

For X = 1 To NumZonas
    If Zonas(X).Mapa = UserMap Then
    If UserPos.X >= Zonas(X).X1 - 16 And UserPos.X <= Zonas(X).X1 + 16 And UserPos.Y >= Zonas(X).Y1 - 13 And UserPos.Y <= Zonas(X).Y2 + 9 Then
        Call DrawLine((Zonas(X).X1 - UserPos.X + 19 - 3) * 32, (Zonas(X).Y1 - UserPos.Y + 17 - 4) * 32, (Zonas(X).X1 - UserPos.X + 19 - 3) * 32, (Zonas(X).Y2 - UserPos.Y + 18 - 4) * 32, color)
        If UserPos.Y >= Zonas(X).Y1 - 13 And UserPos.Y <= Zonas(X).Y1 + 13 And UserPos.X >= Zonas(X).X1 - 16 And UserPos.X <= Zonas(X).X2 + 16 Then
            'Call DrawText((Zonas(X).X1 - UserPos.X + 19) * 32 + 10, 10 + (Zonas(X).Y1 - UserPos.Y + 17) * 32, Zonas(X).Nombre, vbWhite)
            Text_Render font_list(1), Zonas(X).Nombre & " - #" & X, 10 + (Zonas(X).Y1 - UserPos.Y + 17 - 4) * 32, (Zonas(X).X1 - UserPos.X + 19 - 3) * 32 + 10, 200, 15, &HFFFFFFFF, DT_LEFT

        End If
    End If
    If UserPos.X >= Zonas(X).X2 - 16 And UserPos.X <= Zonas(X).X2 + 16 And UserPos.Y >= Zonas(X).Y1 - 13 And UserPos.Y <= Zonas(X).Y2 + 13 Then
        Call DrawLine((Zonas(X).X2 - UserPos.X + 20 - 3) * 32, (Zonas(X).Y1 - UserPos.Y + 17 - 4) * 32, (Zonas(X).X2 - UserPos.X + 20 - 3) * 32, (Zonas(X).Y2 - UserPos.Y + 18 - 4) * 32, color)
    End If
    If UserPos.Y >= Zonas(X).Y1 - 13 And UserPos.Y <= Zonas(X).Y1 + 13 And UserPos.X >= Zonas(X).X1 - 16 And UserPos.X <= Zonas(X).X2 + 16 Then
        Call DrawLine((Zonas(X).X1 - UserPos.X + 19 - 3) * 32, (Zonas(X).Y1 - UserPos.Y + 17 - 4) * 32, (Zonas(X).X2 - UserPos.X + 20 - 3) * 32, (Zonas(X).Y1 - UserPos.Y + 17 - 4) * 32, color)
    End If
    If UserPos.Y >= Zonas(X).Y2 - 13 And UserPos.Y <= Zonas(X).Y2 + 13 And UserPos.X >= Zonas(X).X1 - 16 And UserPos.X <= Zonas(X).X2 + 16 Then
        Call DrawLine((Zonas(X).X1 - UserPos.X + 19 - 3) * 32, (Zonas(X).Y2 - UserPos.Y + 18 - 4) * 32, (Zonas(X).X2 - UserPos.X + 20 - 3) * 32, (Zonas(X).Y2 - UserPos.Y + 18 - 4) * 32, color)
    End If
    End If
Next X

For X = 1 To NumAreas
    If Areas(X).Mapa = UserMap Then
    If X = SelArea Then
        color = D3DColorRGBA(255, 255, 0, 255)
    Else
        color = D3DColorRGBA(255, 0, 0, 255)
    End If
    
    If UserPos.X >= Areas(X).X1 - 16 And UserPos.X <= Areas(X).X1 + 16 And UserPos.Y >= Areas(X).Y1 - 13 And UserPos.Y <= Areas(X).Y2 + 13 Then
        Call DrawLine((Areas(X).X1 - UserPos.X + 19 - 3) * 32, (Areas(X).Y1 - UserPos.Y + 17 - 4) * 32, (Areas(X).X1 - UserPos.X + 19 - 3) * 32, (Areas(X).Y2 - UserPos.Y + 18 - 4) * 32, color)
    End If
    If UserPos.X >= Areas(X).X2 - 16 And UserPos.X <= Areas(X).X2 + 16 And UserPos.Y >= Areas(X).Y1 - 13 And UserPos.Y <= Areas(X).Y2 + 13 Then
        Call DrawLine((Areas(X).X2 - UserPos.X + 20 - 3) * 32, (Areas(X).Y1 - UserPos.Y + 17 - 4) * 32, (Areas(X).X2 - UserPos.X + 20 - 3) * 32, (Areas(X).Y2 - UserPos.Y + 18 - 4) * 32, color)
    End If
    If UserPos.Y >= Areas(X).Y1 - 16 And UserPos.Y <= Areas(X).Y1 + 16 And UserPos.X >= Areas(X).X1 - 13 And UserPos.X <= Areas(X).X2 + 13 Then
        Call DrawLine((Areas(X).X1 - UserPos.X + 19 - 3) * 32, (Areas(X).Y1 - UserPos.Y + 17 - 4) * 32, (Areas(X).X2 - UserPos.X + 20 - 3) * 32, (Areas(X).Y1 - UserPos.Y + 17 - 4) * 32, color)
    End If
    If UserPos.Y >= Areas(X).Y2 - 16 And UserPos.Y <= Areas(X).Y2 + 16 And UserPos.X >= Areas(X).X1 - 13 And UserPos.X <= Areas(X).X2 + 13 Then
        Call DrawLine((Areas(X).X1 - UserPos.X + 19 - 3) * 32, (Areas(X).Y2 - UserPos.Y + 18 - 4) * 32, (Areas(X).X2 - UserPos.X + 20 - 3) * 32, (Areas(X).Y2 - UserPos.Y + 18 - 4) * 32, color)
    End If
    End If
Next X

End If
D3DDevice.SetVertexShader FVF
End Sub
Private Sub DrawBox(ByVal X As Integer, ByVal Y As Integer, ByVal X2 As Integer, ByVal Y2 As Integer, ByVal color As Long)
Dim Lines(7) As CUSTOMVERTEX
Dim VertexSizeInBytes2 As Long
With Lines(0): .X = X: .Y = Y: .Z = 0: .color = color: End With
With Lines(1): .X = X2: .Y = Y: .Z = 0: .color = color: End With
With Lines(2): .X = X2: .Y = Y: .Z = 0: .color = color: End With
With Lines(3): .X = X2: .Y = Y2: .Z = 0: .color = color: End With
With Lines(4): .X = X2: .Y = Y2: .Z = 0: .color = color: End With
With Lines(5): .X = X: .Y = Y2: .Z = 0:  .color = color: End With
With Lines(6): .X = X: .Y = Y2: .Z = 0: .color = color: End With
With Lines(7): .X = X: .Y = Y: .Z = 0: .color = color: End With

VertexSizeInBytes2 = LenB(Lines(0))
Set VertexBuffer2 = D3DDevice.CreateVertexBuffer(VertexSizeInBytes2 * 8, _
                 0, D3DFVF_CUSTOMVERTEX, D3DPOOL_DEFAULT)

D3DVertexBuffer8SetData VertexBuffer2, 0, VertexSizeInBytes2 * 8, 0, Lines(0)

D3DDevice.SetStreamSource 0, VertexBuffer2, VertexSizeInBytes2
        
D3DDevice.SetTexture 0, Nothing
        'let Direct3D know what vertex shader to use
D3DDevice.SetVertexShader D3DFVF_CUSTOMVERTEX
        
        'render the vertices in the vertex buffer
D3DDevice.DrawPrimitive D3DPT_LINELIST, 0, 4
End Sub

Private Sub DrawLine(ByVal X As Integer, ByVal Y As Integer, ByVal X2 As Integer, ByVal Y2 As Integer, ByVal color As Long)
Dim Lines(1) As CUSTOMVERTEX
Dim VertexSizeInBytes2 As Long
With Lines(0): .X = X: .Y = Y: .Z = 0: .color = color: End With
With Lines(1): .X = X2: .Y = Y2: .Z = 0: .color = color: End With


VertexSizeInBytes2 = LenB(Lines(0))
Set VertexBuffer2 = D3DDevice.CreateVertexBuffer(VertexSizeInBytes2 * 8, _
                 0, D3DFVF_CUSTOMVERTEX, D3DPOOL_DEFAULT)

D3DVertexBuffer8SetData VertexBuffer2, 0, VertexSizeInBytes2 * 8, 0, Lines(0)

D3DDevice.SetStreamSource 0, VertexBuffer2, VertexSizeInBytes2
        
        
D3DDevice.SetTexture 0, Nothing
        'let Direct3D know what vertex shader to use
D3DDevice.SetVertexShader D3DFVF_CUSTOMVERTEX
        
        'render the vertices in the vertex buffer
D3DDevice.DrawPrimitive D3DPT_LINELIST, 0, 1
End Sub

Private Function Geometry_Create_TLVertex(ByVal X As Single, ByVal Y As Single, ByVal Z As Single, _
                                            ByVal rhw As Single, ByVal color As Long, ByVal Specular As Long, tu As Single, _
                                            ByVal tv As Single) As TLVERTEX
'**************************************************************
'Author: Aaron Perkins
'Last Modify Date: 10/07/2002
'**************************************************************
    Geometry_Create_TLVertex.X = X
    Geometry_Create_TLVertex.Y = Y
    Geometry_Create_TLVertex.Z = Z
    Geometry_Create_TLVertex.rhw = rhw
    Geometry_Create_TLVertex.color = color
    Geometry_Create_TLVertex.Specular = Specular
    Geometry_Create_TLVertex.tu = tu
    Geometry_Create_TLVertex.tv = tv
End Function

Private Function Geometry_Create_TLVertex2(X As Single, Y As Single, Z As Single, rhw As Single, color As Long, Specular As Long, tu1 As Single, tv1 As Single, tu2 As Single, tv2 As Single) As TLVERTEX2
'mz
Geometry_Create_TLVertex2.X = X
Geometry_Create_TLVertex2.Y = Y
Geometry_Create_TLVertex2.Z = Z
Geometry_Create_TLVertex2.rhw = rhw
Geometry_Create_TLVertex2.color = color
Geometry_Create_TLVertex2.Specular = Specular
Geometry_Create_TLVertex2.tu1 = tu1
Geometry_Create_TLVertex2.tv1 = tv1
Geometry_Create_TLVertex2.tu2 = tu2
Geometry_Create_TLVertex2.tv2 = tv2
End Function

Private Sub Geometry_Create_Box(ByRef verts() As TLVERTEX, ByRef dest As RECT, ByRef src As RECT, ByRef rgb_list() As Long, _
                                Optional ByRef Textures_Width As Long, Optional ByRef Textures_Height As Long, Optional ByVal angle As Single)
'**************************************************************
'Author: Aaron Perkins
'Modified by Juan Martín Sotuyo Dodero
'Last Modify Date: 11/17/2002
'
' * v1      * v3
' |\        |
' |  \      |
' |    \    |
' |      \  |
' |        \|
' * v0      * v2
'**************************************************************
    Dim x_center As Single
    Dim y_center As Single
    Dim radius As Single
    Dim x_Cor As Single
    Dim y_Cor As Single
    Dim left_point As Single
    Dim right_point As Single
    Dim temp As Single
    
    If angle > 0 Then
        'Center coordinates on screen of the square
        x_center = dest.Left + (dest.Right - dest.Left) / 2
        y_center = dest.Top + (dest.Bottom - dest.Top) / 2
        
        'Calculate radius
        radius = Sqr((dest.Right - x_center) ^ 2 + (dest.Bottom - y_center) ^ 2)
        
        'Calculate left and right points
        temp = (dest.Right - x_center) / radius
        right_point = Atn(temp / Sqr(-temp * temp + 1))
        left_point = PI - right_point
    End If
    
    'Calculate screen coordinates of sprite, and only rotate if necessary
    If angle = 0 Then
        x_Cor = dest.Left
        y_Cor = dest.Bottom
    Else
        x_Cor = x_center + Cos(-left_point - angle) * radius
        y_Cor = y_center - Sin(-left_point - angle) * radius
    End If
    
    
    '0 - Bottom left vertex
    If Textures_Width And Textures_Height Then
        verts(0) = Geometry_Create_TLVertex(x_Cor, y_Cor, 0, 1, rgb_list(0), 0, src.Left / Textures_Width, (src.Bottom + 1) / Textures_Height)
    Else
        verts(0) = Geometry_Create_TLVertex(x_Cor, y_Cor, 0, 1, rgb_list(0), 0, 0, 0)
    End If
    'Calculate screen coordinates of sprite, and only rotate if necessary
    If angle = 0 Then
        x_Cor = dest.Left
        y_Cor = dest.Top
    Else
        x_Cor = x_center + Cos(left_point - angle) * radius
        y_Cor = y_center - Sin(left_point - angle) * radius
    End If
    
    
    '1 - Top left vertex
    If Textures_Width And Textures_Height Then
        verts(1) = Geometry_Create_TLVertex(x_Cor, y_Cor, 0, 1, rgb_list(1), 0, src.Left / Textures_Width, src.Top / Textures_Height)
    Else
        verts(1) = Geometry_Create_TLVertex(x_Cor, y_Cor, 0, 1, rgb_list(1), 0, 0, 1)
    End If
    'Calculate screen coordinates of sprite, and only rotate if necessary
    If angle = 0 Then
        x_Cor = dest.Right
        y_Cor = dest.Bottom
    Else
        x_Cor = x_center + Cos(-right_point - angle) * radius
        y_Cor = y_center - Sin(-right_point - angle) * radius
    End If
    
    
    '2 - Bottom right vertex
    If Textures_Width And Textures_Height Then
        verts(2) = Geometry_Create_TLVertex(x_Cor, y_Cor, 0, 1, rgb_list(2), 0, (src.Right + 1) / Textures_Width, (src.Bottom + 1) / Textures_Height)
    Else
        verts(2) = Geometry_Create_TLVertex(x_Cor, y_Cor, 0, 1, rgb_list(2), 0, 1, 0)
    End If
    'Calculate screen coordinates of sprite, and only rotate if necessary
    If angle = 0 Then
        x_Cor = dest.Right
        y_Cor = dest.Top
    Else
        x_Cor = x_center + Cos(right_point - angle) * radius
        y_Cor = y_center - Sin(right_point - angle) * radius
    End If
    
    
    '3 - Top right vertex
    If Textures_Width And Textures_Height Then
        verts(3) = Geometry_Create_TLVertex(x_Cor, y_Cor, 0, 1, rgb_list(3), 0, (src.Right + 1) / Textures_Width, src.Top / Textures_Height)
    Else
        verts(3) = Geometry_Create_TLVertex(x_Cor, y_Cor, 0, 1, rgb_list(3), 0, 1, 1)
    End If

End Sub
Private Sub Device_Box_Textured_Render_Advance(ByVal grhindex As Long, ByVal dest_x As Long, ByVal dest_y As Long, ByVal src_width As Integer, _
                                            ByVal src_height As Integer, ByRef rgb_list() As Long, ByVal src_x As Integer, _
                                            ByVal src_y As Integer, ByVal dest_width As Integer, Optional ByVal dest_height As Integer, _
                                            Optional ByVal alpha_blend As Boolean, Optional ByVal angle As Single)
'**************************************************************
'Author: Aaron Perkins
'Last Modify Date: 5/15/2003
'Copies the Textures allowing resizing
'Modified by Juan Martín Sotuyo Dodero
'**************************************************************
    Static src_rect As RECT
    Static dest_rect As RECT
    Static temp_verts(3) As TLVERTEX
    Static d3dTextures As D3D8Textures
    Static light_value(0 To 3) As Long

    If grhindex = 0 Then Exit Sub
    Set d3dTextures.Texture = SurfaceDB.GetTexture(GrhData(grhindex).FileNum, d3dTextures.texwidth, d3dTextures.texheight)
    
    light_value(0) = rgb_list(0)
    light_value(1) = rgb_list(1)
    light_value(2) = rgb_list(2)
    light_value(3) = rgb_list(3)
        
    'If Not char_current_blind Then
    '    If (light_value(0) = 0) Then light_value(0) = 0
    '    If (light_value(1) = 0) Then light_value(1) = 0
    '    If (light_value(2) = 0) Then light_value(2) = 0
    '    If (light_value(3) = 0) Then light_value(3) = 0
    'Else
        light_value(0) = &HFFFFFFFF 'blind_color
        light_value(1) = &HFFFFFFFF 'blind_color
        light_value(2) = &HFFFFFFFF 'blind_color
        light_value(3) = &HFFFFFFFF 'blind_color
    'End If
    
    'Set up the source rectangle
    With src_rect
        .Bottom = src_y + src_height
        .Left = src_x
        .Right = src_x + src_width
        .Top = src_y
    End With
        
    'Set up the destination rectangle
    With dest_rect
        .Bottom = dest_y + dest_height
        .Left = dest_x
        .Right = dest_x + dest_width
        .Top = dest_y
    End With
    
    'Set up the TempVerts(3) vertices
    Geometry_Create_Box temp_verts(), dest_rect, src_rect, light_value(), d3dTextures.texwidth, d3dTextures.texheight, angle
        
    'Set Textures
    D3DDevice.SetTexture 0, d3dTextures.Texture
    
    If alpha_blend Then
       'Set Rendering for alphablending
        D3DDevice.SetRenderState D3DRS_SRCBLEND, D3DBLEND_ONE
        D3DDevice.SetRenderState D3DRS_DESTBLEND, D3DBLEND_ONE
    End If
    
    'Draw the triangles that make up our square Textures
    D3DDevice.DrawPrimitiveUP D3DPT_TRIANGLESTRIP, 2, temp_verts(0), Len(temp_verts(0))
    
    If alpha_blend Then
        'Set Rendering for colokeying
        D3DDevice.SetRenderState D3DRS_SRCBLEND, D3DBLEND_SRCALPHA
        D3DDevice.SetRenderState D3DRS_DESTBLEND, D3DBLEND_INVSRCALPHA
    End If

End Sub

Public Sub Device_Box_Textured_Render(ByVal grhindex As Long, ByVal dest_x As Integer, ByVal dest_y As Integer, ByVal src_width As Integer, _
                                            ByVal src_height As Integer, ByRef rgb_list() As Long, ByVal src_x As Integer, _
                                            ByVal src_y As Integer, Optional ByVal alpha_blend As Boolean, Optional ByVal angle As Single)
'**************************************************************
'Author: Juan Martín Sotuyo Dodero
'Last Modify Date: 2/12/2004
'Just copies the Textures
'**************************************************************
    Static src_rect As RECT
    Static dest_rect As RECT
    Static temp_verts(3) As TLVERTEX
    Static d3dTextures As D3D8Textures
    Static light_value(0 To 3) As Long
    
    If grhindex = 0 Then Exit Sub
    Set d3dTextures.Texture = SurfaceDB.GetTexture(GrhData(grhindex).FileNum, d3dTextures.texwidth, d3dTextures.texheight)
    
    light_value(0) = rgb_list(2)
    light_value(1) = rgb_list(0)
    light_value(2) = rgb_list(3)
    light_value(3) = rgb_list(1)
    
    'If Not char_current_blind Then
        If (light_value(0) = 0) Then light_value(0) = base_light
        If (light_value(1) = 0) Then light_value(1) = base_light
        If (light_value(2) = 0) Then light_value(2) = base_light
        If (light_value(3) = 0) Then light_value(3) = base_light
    'Else
    '    light_value(0) = &HFFFFFFFF 'blind_color
    '    light_value(1) = &HFFFFFFFF 'blind_color
    '    light_value(2) = &HFFFFFFFF 'blind_color
    '    light_value(3) = &HFFFFFFFF 'blind_color
    'End If
        
    'Set up the source rectangle
    With src_rect
        .Bottom = src_y + src_height
        .Left = src_x
        .Right = src_x + src_width
        .Top = src_y
    End With
                
    'Set up the destination rectangle
    With dest_rect
        .Bottom = dest_y + src_height
        .Left = dest_x
        .Right = dest_x + src_width
        .Top = dest_y
    End With
    
    'Set up the TempVerts(3) vertices
    Geometry_Create_Box temp_verts(), dest_rect, src_rect, light_value(), d3dTextures.texwidth, d3dTextures.texheight, angle
    
    'Set Textures
    D3DDevice.SetTexture 0, d3dTextures.Texture
    
    If alpha_blend Then
       'Set Rendering for alphablending
        D3DDevice.SetRenderState D3DRS_SRCBLEND, D3DBLEND_ONE
        D3DDevice.SetRenderState D3DRS_DESTBLEND, D3DBLEND_ONE
    End If
    
    'Draw the triangles that make up our square Textures
    D3DDevice.DrawPrimitiveUP D3DPT_TRIANGLESTRIP, 2, temp_verts(0), Len(temp_verts(0))
    
    If alpha_blend Then
        'Set Rendering for colokeying
        D3DDevice.SetRenderState D3DRS_SRCBLEND, D3DBLEND_SRCALPHA
        D3DDevice.SetRenderState D3DRS_DESTBLEND, D3DBLEND_INVSRCALPHA
    End If

End Sub


Public Sub Engine_MoveScreen(ByVal nHeading As Byte)
'******************************************
'Starts the screen moving in a direction
'******************************************
    Dim X As Integer
    Dim Y As Integer
    Dim tx As Integer
    Dim ty As Integer
    
    'Figure out which way to move
    Select Case nHeading
        Case NORTH
            Y = -1
        
        Case EAST
            X = 1
        
        Case SOUTH
            Y = 1
        
        Case WEST
            X = -1
    End Select
    
    'Fill temp pos
    tx = UserPos.X + X
    ty = UserPos.Y + Y
    
    'Check to see if its out of bounds
    If tx < MinXBorder Or tx > MaxXBorder Or ty < MinYBorder Or ty > MaxYBorder Then
        Exit Sub
    Else
        'Start moving... MainLoop does the rest
        AddtoUserPos.X = X
        UserPos.X = tx
        AddtoUserPos.Y = Y
        UserPos.Y = ty
        UserMoving = 1
        
        bTecho = IIf(MapData(CurrentMap).Tile(UserPos.X, UserPos.Y).Trigger = 1 Or _
                MapData(CurrentMap).Tile(UserPos.X, UserPos.Y).Trigger = 2 Or _
                MapData(CurrentMap).Tile(UserPos.X, UserPos.Y).Trigger = 4, True, False)
    End If
End Sub

Private Sub Char_Render(ByVal CharIndex As Long, ByVal PixelOffsetx As Integer, ByVal PixelOffsety As Integer, ByVal X As Integer, ByVal Y As Integer)
'***************************************************
'Author: Juan Martín Sotuyo Dodero (Maraxus)
'Last Modify Date: 12/03/04
'Draw char's to screen without offcentering them
'***************************************************


'Standelf
    Dim moved As Boolean
    Dim Pos As Integer
    Dim line As String
    Dim color As Long
    
    With charlist(CharIndex)
        If MapData(CurrentMap).Tile(X, Y).Trigger = 8 Then
            .Heading = NORTH
        ElseIf MapData(CurrentMap).Tile(X, Y).Trigger = 9 Then
            .Heading = WEST
        ElseIf MapData(CurrentMap).Tile(X, Y).Trigger = 10 Then
            .Heading = EAST
        End If
        If .Moving Then
            'If needed, move left and right
            If .scrollDirectionX <> 0 Then
                .MoveOffsetX = .MoveOffsetX + ScrollPixelsPerFrameX * Sgn(.scrollDirectionX) * timerTicksPerFrame
                
                'Start animations
'TODO : Este parche es para evita los uncornos exploten al moverse!! REVER!!!
                If .Body.Walk(.Heading).Speed > 0 Then _
                    .Body.Walk(.Heading).Started = 1
                .Arma.WeaponWalk(.Heading).Started = 1
                .Escudo.ShieldWalk(.Heading).Started = 1
                
                'Char moved
                moved = True
                
                'Check if we already got there
                If (Sgn(.scrollDirectionX) = 1 And .MoveOffsetX >= 0) Or _
                        (Sgn(.scrollDirectionX) = -1 And .MoveOffsetX <= 0) Then
                    .MoveOffsetX = 0
                    .scrollDirectionX = 0
                End If
            End If
            
            'If needed, move up and down
            If .scrollDirectionY <> 0 Then
                .MoveOffsetY = .MoveOffsetY + ScrollPixelsPerFrameY * Sgn(.scrollDirectionY) * timerTicksPerFrame
                
                'Start animations
'TODO : Este parche es para evita los uncornos exploten al moverse!! REVER!!!
                If .Body.Walk(.Heading).Speed > 0 Then _
                    .Body.Walk(.Heading).Started = 1
                .Arma.WeaponWalk(.Heading).Started = 1
                .Escudo.ShieldWalk(.Heading).Started = 1
                
                'Char moved
                moved = True
                
                'Check if we already got there
                If (Sgn(.scrollDirectionY) = 1 And .MoveOffsetY >= 0) Or _
                        (Sgn(.scrollDirectionY) = -1 And .MoveOffsetY <= 0) Then
                    .MoveOffsetY = 0
                    .scrollDirectionY = 0
                End If
            End If
        End If
        
        'If done moving stop animation
        If Not moved Then
            'Stop animations
            If .Heading > 0 Then
            .Body.Walk(.Heading).Started = 0
            .Body.Walk(.Heading).FrameCounter = 1
            
            .Arma.WeaponWalk(.Heading).Started = 0
            .Arma.WeaponWalk(.Heading).FrameCounter = 1
            
            .Escudo.ShieldWalk(.Heading).Started = 0
            .Escudo.ShieldWalk(.Heading).FrameCounter = 1
            End If
            .Moving = False
        End If
        
        PixelOffsetx = PixelOffsetx + .MoveOffsetX
        PixelOffsety = PixelOffsety + .MoveOffsetY
        If .Heading > 0 Then
        If .Head.Head(.Heading).grhindex Then
            If Not .invisible Then
                'Draw Body
                If .Body.Walk(.Heading).grhindex Then
                    Call Draw_Grh(.Body.Walk(.Heading), PixelOffsetx, PixelOffsety, 1, 1, , X, Y)
                End If
                
                If .Head.Head(.Heading).grhindex Then
                    Call Draw_Grh(.Head.Head(.Heading), PixelOffsetx + .Body.HeadOffset.X, PixelOffsety + .Body.HeadOffset.Y, 1, 0, , X, Y)
                End If
            End If
        Else
            'Draw Body
            If .Body.Walk(.Heading).grhindex Then
                Call Draw_Grh(.Body.Walk(.Heading), PixelOffsetx, PixelOffsety, 1, 1, , X, Y)
            End If
        End If
        End If

    End With
End Sub

Public Sub Start()
    day_r_old = luz_dia(Hour(Time)).r
    day_g_old = luz_dia(Hour(Time)).g
    day_b_old = luz_dia(Hour(Time)).b
    base_light = ARGB(day_r_old, day_g_old, day_b_old, 255)
    
DoEvents
vertList(0).X = 0: vertList(0).Y = 0
vertList(1).X = 800: vertList(1).Y = 0
vertList(2).X = 0: vertList(2).Y = 600
vertList(3).X = 800: vertList(3).Y = 600
vertList(0).rhw = 1
vertList(1).rhw = 1
vertList(2).rhw = 1
vertList(3).rhw = 1
vertList(0).color = D3DColorXRGB(255, 255, 255)
vertList(1).color = D3DColorXRGB(255, 255, 255)
vertList(2).color = D3DColorXRGB(255, 255, 255)
vertList(3).color = D3DColorXRGB(255, 255, 255)
vertList(0).tu = 0
vertList(0).tv = 0
vertList(1).tu = 1
vertList(1).tv = 0
vertList(2).tu = 0
vertList(2).tv = 1
vertList(3).tu = 1
vertList(3).tv = 1

Do While prgRun
'Call FlushBuffer
If frmMain.WindowState <> vbMinimized And frmMain.Visible = True Then
If Grabar Then
    engine.Render
    DoEvents

    frmMain.pGuardar.Cls
    DoEvents
    
    
    
    Call SetStretchBltMode(frmMain.pGuardar.hdc, STRETCHMODE)
    'Call StretchBlt(frmMain.pGuardar.hDC, 0, 0, 44, 38, frmMain.hDC, frmMain.Renderer.Left + 1, frmMain.Renderer.Top + 1, 22 * 32 - 1, 19 * 32 - 1, &HCC0020)
    Call StretchBlt(frmMain.pGuardar.hdc, 0, 0, 64, 52, frmMain.Renderer.hdc, 0, 0, 32 * 32 - 1, 26 * 32 - 1, &HCC0020)
    
    DoEvents
    'Call SavePicture(frmMain.pGuardar.Image, App.Path & "\" & NumIX & ".bmp")
    frmMain.pGuardar.Refresh
    Call BitBlt(frmMain.Picture1.hdc, (UserPos.X - 17) * 2, (UserPos.Y - 14) * 2, 64, 52, frmMain.pGuardar.hdc, 0, 0, &HCC0020)
    'Call frmMain.Picture1.PaintPicture(frmMain.pGuardar.Image, (UserPos.X - 12) * 3, (UserPos.Y - 10) * 3, 66, 57, 0, 0, 66, 57)
    frmMain.Picture1.Refresh
    DoEvents
    UserPos.X = UserPos.X + 32
    If GrabarParcial Then
        If UserPos.X > EditLimit.Right + 16 Then
            UserPos.Y = UserPos.Y + 26
            UserPos.X = 16 + EditLimit.Left
        End If
        If UserPos.Y > EditLimit.Bottom + 13 Or UserPos.Y >= MapInfo(CurrentMap).Height Then
            Grabar = False
            EditLimit.Left = MapInfo(CurrentMap).Height
            EditLimit.Top = MapInfo(CurrentMap).Width
            EditLimit.Right = 0
            EditLimit.Bottom = 0
            Call SavePicture(frmMain.Picture1.Image, App.Path & "\mapa" & UserMap & ".bmp")
            
            Call SetStretchBltMode(frmMain.picRadar.hdc, STRETCHMODE)
            Call StretchBlt(frmMain.picRadar.hdc, 0, 0, 550, 750, frmMain.Picture1.hdc, 0, 0, 2200, 3000, &HCC0020)
    
            Call SavePicture(frmMain.picRadar.Image, App.Path & "\mapamini" & IIf(UserMap = 2, "2", "") & ".bmp")
            
            If UserMap = 1 Then
                frmMain.picMapGrh.Cls
                Call SetStretchBltMode(frmMain.picMapGrh.hdc, STRETCHMODE)
                Call StretchBlt(frmMain.picMapGrh.hdc, 0, 0, 1024, 1024, frmMain.Picture1.hdc, 33, 33, 1066, 1066, &HCC0020)
                Call SavePicture(frmMain.picMapGrh.Image, App.Path & "\14404.bmp")
                
                frmMain.picMapGrh.Cls
                Call SetStretchBltMode(frmMain.picMapGrh.hdc, STRETCHMODE)
                Call StretchBlt(frmMain.picMapGrh.hdc, 0, 0, 1024, 1024, frmMain.Picture1.hdc, 1099, 33, 1066, 1066, &HCC0020)
                Call SavePicture(frmMain.picMapGrh.Image, App.Path & "\14405.bmp")
                
                frmMain.picMapGrh.Cls
                Call SetStretchBltMode(frmMain.picMapGrh.hdc, STRETCHMODE)
                Call StretchBlt(frmMain.picMapGrh.hdc, 0, 0, 1024, 1024, frmMain.Picture1.hdc, 33, 1099, 1066, 1066, &HCC0020)
                Call SavePicture(frmMain.picMapGrh.Image, App.Path & "\14406.bmp")
                
                frmMain.picMapGrh.Cls
                Call SetStretchBltMode(frmMain.picMapGrh.hdc, STRETCHMODE)
                Call StretchBlt(frmMain.picMapGrh.hdc, 0, 0, 1024, 1024, frmMain.Picture1.hdc, 1099, 1099, 1066, 1066, &HCC0020)
                Call SavePicture(frmMain.picMapGrh.Image, App.Path & "\14407.bmp")
                
                frmMain.picMapGrh.Cls
                Call SetStretchBltMode(frmMain.picMapGrh.hdc, STRETCHMODE)
                Call StretchBlt(frmMain.picMapGrh.hdc, 0, 0, 1024, 769, frmMain.Picture1.hdc, 33, 2165, 1066, 801, &HCC0020)
                Call SavePicture(frmMain.picMapGrh.Image, App.Path & "\14408.bmp")
                    
                frmMain.picMapGrh.Cls
                Call SetStretchBltMode(frmMain.picMapGrh.hdc, STRETCHMODE)
                Call StretchBlt(frmMain.picMapGrh.hdc, 0, 0, 1024, 769, frmMain.Picture1.hdc, 1099, 2165, 1066, 801, &HCC0020)
                Call SavePicture(frmMain.picMapGrh.Image, App.Path & "\14409.bmp")
            End If
            
        End If

    Else
        If UserPos.X >= MapInfo(CurrentMap).Width + 32 Then
            UserPos.Y = UserPos.Y + 26
            UserPos.X = 12
        End If
        If UserPos.Y >= MapInfo(CurrentMap).Height + 26 Then
            Grabar = False
            
            Call SavePicture(frmMain.Picture1.Image, DirMaps & "\Mapa" & UserMap & ".bmp")
            
            Call SetStretchBltMode(frmMain.picRadar.hdc, STRETCHMODE)
            Call StretchBlt(frmMain.picRadar.hdc, 0, 0, 550, 750, frmMain.Picture1.hdc, 0, 0, 2200, 3000, &HCC0020)
    
            Call SavePicture(frmMain.picRadar.Image, DirMaps & "\Mini" & UserMap & ".bmp")
            
        End If
        frmMain.ApuntadorRadar.Move (UserPos.X - 17) / 2, (UserPos.Y - 15) / 2
    End If
Else
    CheckKeys
    engine.Render
    engine.Engine_ActFPS
    
    If bRefreshRadar = True Then
        Call RefreshAllChars
        bRefreshRadar = False
    End If
End If
    
Else
    Sleep 10&
End If
DoEvents

Loop
engine.Engine_Deinit
End
'Call CloseClient
End Sub

Public Sub SetCharacterFx(ByVal CharIndex As Integer, ByVal fX As Integer, ByVal Loops As Integer)
'***************************************************
'Author: Juan Martín Sotuyo Dodero (Maraxus)
'Last Modify Date: 12/03/04
'Sets an FX to the character.
'***************************************************
    With charlist(CharIndex)
        .FxIndex = fX
        
        If .FxIndex > 0 Then
            Call InitGrh(.fX, FxData(fX).Animacion)
        
            .fX.Loops = Loops
        End If
    End With
End Sub

Public Sub Char_Move_by_Head(ByVal CharIndex As Integer, ByVal nHeading As Byte)

'*****************************************************************
'Starts the movement of a character in nHeading direction
'*****************************************************************
    Dim addx As Integer
    Dim addy As Integer
    Dim X As Integer
    Dim Y As Integer
    Dim nX As Integer
    Dim nY As Integer
    
    With charlist(CharIndex)
        X = .Pos.X
        Y = .Pos.Y
        
        'Figure out which way to move
        Select Case nHeading
            Case NORTH
                addy = -1
        
            Case EAST
                addx = 1
        
            Case SOUTH
                addy = 1
            
            Case WEST
                addx = -1
        End Select
        
        nX = X + addx
        nY = Y + addy
        
        MapData(CurrentMap).Tile(nX, nY).CharIndex = CharIndex
        .Pos.X = nX
        .Pos.Y = nY
        MapData(CurrentMap).Tile(X, Y).CharIndex = 0
        
        .MoveOffsetX = -1 * (32 * addx)
        .MoveOffsetY = -1 * (32 * addy)
        
        .Moving = 1
        .Heading = nHeading
        
        .scrollDirectionX = addx
        .scrollDirectionY = addy
    End With

End Sub

Public Sub Char_Move_by_Pos(ByVal CharIndex As Integer, ByVal nX As Integer, ByVal nY As Integer)
On Error Resume Next
    Dim X As Integer
    Dim Y As Integer
    Dim addx As Integer
    Dim addy As Integer
    Dim nHeading As Byte
    
    With charlist(CharIndex)
        X = .Pos.X
        Y = .Pos.Y
        
        MapData(CurrentMap).Tile(X, Y).CharIndex = 0
        
        addx = nX - X
        addy = nY - Y
        
        If Sgn(addx) = 1 Then
            nHeading = EAST
        End If
        
        If Sgn(addx) = -1 Then
            nHeading = WEST
        End If
        
        If Sgn(addy) = -1 Then
            nHeading = NORTH
        End If
        
        If Sgn(addy) = 1 Then
            nHeading = SOUTH
        End If
        
        MapData(CurrentMap).Tile(nX, nY).CharIndex = CharIndex
        
        
        .Pos.X = nX
        .Pos.Y = nY
        
        .MoveOffsetX = -1 * (32 * addx)
        .MoveOffsetY = -1 * (32 * addy)
        
        .Moving = 1
        .Heading = nHeading
        
        .scrollDirectionX = Sgn(addx)
        .scrollDirectionY = Sgn(addy)
        
    End With
    

End Sub

Private Function EstaPCarea(ByVal CharIndex As Integer) As Boolean
    With charlist(CharIndex).Pos
        EstaPCarea = .X > UserPos.X - MinXBorder And .X < UserPos.X + MinXBorder And .Y > UserPos.Y - MinYBorder And .Y < UserPos.Y + MinYBorder
    End With
End Function


'Public Sub FXMake( _
ByVal Index As Integer, _
ByVal map_y As Integer, _
ByVal map_x As Integer, _
ByVal tipo As fxs_type)
'    Dim datos(2) As Byte
'    ReDim Preserve fxs_list(0 To Index)
    
'    MapData(CurrentMap).Tile(map_x, map_y).FXS_group = Index
'    fxs_list(Index).Set_fx tipo, 0, datos()
'End Sub

Private Function CreateColorVal(A As Integer, r As Integer, g As Integer, b As Integer) As D3DCOLORVALUE
    CreateColorVal.A = A
    CreateColorVal.r = r
    CreateColorVal.g = g
    CreateColorVal.b = b
End Function


Private Function Engine_FToDW(F As Single) As Long
' single > long
Dim buf As D3DXBuffer
    Set buf = D3DX.CreateBuffer(4)
    D3DX.BufferSetData buf, 0, 4, 1, F
    D3DX.BufferGetData buf, 0, 4, 1, Engine_FToDW
End Function

Private Function VectorToRGBA(Vec As D3DVECTOR, fHeight As Single) As Long
Dim r As Integer, g As Integer, b As Integer, A As Integer
    r = 127 * Vec.X + 128
    g = 127 * Vec.Y + 128
    b = 127 * Vec.Z + 128
    A = 255 * fHeight
    VectorToRGBA = D3DColorARGB(A, r, g, b)
End Function


Public Sub Draw_FilledBox(ByVal X As Integer, ByVal Y As Integer, ByVal Width As Integer, ByVal Height As Integer, color As Long, outlinecolor As Long)

    Static box_rect As RECT
    Static Outline As RECT
    Static rgb_list(3) As Long
    Static rgb_list2(3) As Long
    Static Vertex(3) As TLVERTEX
    Static Vertex2(3) As TLVERTEX
    
    rgb_list(0) = color
    rgb_list(1) = color
    rgb_list(2) = color
    rgb_list(3) = color
    
    rgb_list2(0) = outlinecolor
    rgb_list2(1) = outlinecolor
    rgb_list2(2) = outlinecolor
    rgb_list2(3) = outlinecolor
    
    With box_rect
        .Bottom = Y + Height
        .Left = X
        .Right = X + Width
        .Top = Y
    End With
    
    With Outline
        .Bottom = Y + Height + 2
        .Left = X - 2
        .Right = X + Width + 2
        .Top = Y - 2
    End With
    
    Geometry_Create_Box Vertex2(), Outline, Outline, rgb_list2(), 0, 0
    Geometry_Create_Box Vertex(), box_rect, box_rect, rgb_list(), 0, 0
    
    D3DDevice.SetTexture 0, Nothing
    D3DDevice.DrawPrimitiveUP D3DPT_TRIANGLESTRIP, 2, Vertex2(0), Len(Vertex2(0))
    D3DDevice.DrawPrimitiveUP D3DPT_TRIANGLESTRIP, 2, Vertex(0), Len(Vertex(0))
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''[PARTICULAS]''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function Particle_Group_Create(ByVal MAP_X As Integer, ByVal MAP_Y As Integer, ByRef grh_index_list() As Long, ByRef rgb_list() As Long, _
                                        Optional ByVal particle_count As Long = 20, Optional ByVal stream_type As Long = 1, _
                                        Optional ByVal alpha_blend As Boolean, Optional ByVal alive_counter As Long = -1, _
                                        Optional ByVal frame_speed As Single = 0.5, Optional ByVal ID As Long, _
                                        Optional ByVal X1 As Integer, Optional ByVal Y1 As Integer, Optional ByVal angle As Integer, _
                                        Optional ByVal vecx1 As Integer, Optional ByVal vecx2 As Integer, _
                                        Optional ByVal vecy1 As Integer, Optional ByVal vecy2 As Integer, _
                                        Optional ByVal life1 As Integer, Optional ByVal life2 As Integer, _
                                        Optional ByVal fric As Integer, Optional ByVal spin_speedL As Single, _
                                        Optional ByVal gravity As Boolean, Optional grav_strength As Long, _
                                        Optional bounce_strength As Long, Optional ByVal X2 As Integer, Optional ByVal Y2 As Integer, _
                                        Optional ByVal XMove As Boolean, Optional ByVal move_x1 As Integer, Optional ByVal move_x2 As Integer, _
                                        Optional ByVal move_y1 As Integer, Optional ByVal move_y2 As Integer, Optional ByVal YMove As Boolean, _
                                        Optional ByVal spin_speedH As Single, Optional ByVal spin As Boolean, Optional grh_resize As Boolean, _
                                        Optional grh_resizex As Integer, Optional grh_resizey As Integer) As Integer
'**************************************************************
'Author: Aaron Perkins
'Modified by: Ryan Cain (Onezero)
'Last Modify Date: 5/14/2003
'Returns the particle_group_index if successful, else 0
'Modified by Juan Martín Sotuyo Dodero
'Modified by Augusto José Rando
'**************************************************************
    
    If (MAP_X <> -1) And (MAP_Y <> -1) Then
        If Map_Particle_Group_Get(MAP_X, MAP_Y) = 0 Then
            Particle_Group_Create = Particle_Group_Next_Open
            Particle_Group_Make Particle_Group_Create, MAP_X, MAP_Y, particle_count, stream_type, grh_index_list(), rgb_list(), alpha_blend, alive_counter, frame_speed, ID, X1, Y1, angle, vecx1, vecx2, vecy1, vecy2, life1, life2, fric, spin_speedL, gravity, grav_strength, bounce_strength, X2, Y2, XMove, move_x1, move_x2, move_y1, move_y2, YMove, spin_speedH, spin, grh_resize, grh_resizex, grh_resizey
        End If
    Else
        Particle_Group_Create = Particle_Group_Next_Open
        Particle_Group_Make Particle_Group_Create, MAP_X, MAP_Y, particle_count, stream_type, grh_index_list(), rgb_list(), alpha_blend, alive_counter, frame_speed, ID, X1, Y1, angle, vecx1, vecx2, vecy1, vecy2, life1, life2, fric, spin_speedL, gravity, grav_strength, bounce_strength, X2, Y2, XMove, move_x1, move_x2, move_y1, move_y2, YMove, spin_speedH, spin, grh_resize, grh_resizex, grh_resizey
    End If

End Function

Public Function Particle_Group_Remove(ByVal particle_group_index As Long) As Boolean
'*****************************************************************
'Author: Aaron Perkins
'Last Modify Date: 1/04/2003
'
'*****************************************************************
    'Make sure it's a legal index
    If Particle_Group_Check(particle_group_index) Then
        Particle_Group_Destroy particle_group_index
        Particle_Group_Remove = True
    End If
End Function

Public Function Particle_Group_Remove_All() As Boolean
'*****************************************************************
'Author: Aaron Perkins
'Last Modify Date: 1/04/2003
'
'*****************************************************************
    Dim Index As Long
    
    For Index = 1 To particle_group_last
        'Make sure it's a legal index
        If Particle_Group_Check(Index) Then
            Particle_Group_Destroy Index
        End If
    Next Index
    
    Particle_Group_Remove_All = True
End Function

Public Function Particle_Group_Find(ByVal ID As Long) As Long
'*****************************************************************
'Author: Aaron Perkins
'Last Modify Date: 1/04/2003
'Find the index related to the handle
'*****************************************************************
On Error GoTo ErrorHandler:
    Dim loopc As Long
    
    loopc = 1
    Do Until particle_group_list(loopc).ID = ID
        If loopc = particle_group_last Then
            Particle_Group_Find = 0
            Exit Function
        End If
        loopc = loopc + 1
    Loop
    
    Particle_Group_Find = loopc
Exit Function
ErrorHandler:
    Particle_Group_Find = 0
End Function

Private Sub Particle_Group_Destroy(ByVal particle_group_index As Long)
'**************************************************************
'Author: Aaron Perkins
'Last Modify Date: 10/07/2002
'
'**************************************************************
    Dim temp As Particle_Group
    Dim i As Integer
    
    If particle_group_list(particle_group_index).MAP_X > 0 And particle_group_list(particle_group_index).MAP_Y > 0 Then
        MapData(CurrentMap).Tile(particle_group_list(particle_group_index).MAP_X, particle_group_list(particle_group_index).MAP_Y).particle_group_index = 0
    End If
    
    particle_group_list(particle_group_index) = temp
    
    'Update array size
    If particle_group_index = particle_group_last Then
        Do Until particle_group_list(particle_group_last).ACTIVE
            particle_group_last = particle_group_last - 1
            If particle_group_last = 0 Then
                particle_group_count = 0
                Exit Sub
            End If
        Loop
        ReDim Preserve particle_group_list(1 To particle_group_last)
    End If
    particle_group_count = particle_group_count - 1
End Sub

Private Sub Particle_Group_Make(ByVal particle_group_index As Long, ByVal MAP_X As Integer, ByVal MAP_Y As Integer, _
                                ByVal particle_count As Long, ByVal stream_type As Long, ByRef grh_index_list() As Long, ByRef rgb_list() As Long, _
                                Optional ByVal alpha_blend As Boolean, Optional ByVal alive_counter As Long = -1, _
                                Optional ByVal frame_speed As Single = 0.5, Optional ByVal ID As Long, _
                                Optional ByVal X1 As Integer, Optional ByVal Y1 As Integer, Optional ByVal angle As Integer, _
                                Optional ByVal vecx1 As Integer, Optional ByVal vecx2 As Integer, _
                                Optional ByVal vecy1 As Integer, Optional ByVal vecy2 As Integer, _
                                Optional ByVal life1 As Integer, Optional ByVal life2 As Integer, _
                                Optional ByVal fric As Integer, Optional ByVal spin_speedL As Single, _
                                Optional ByVal gravity As Boolean, Optional grav_strength As Long, _
                                Optional bounce_strength As Long, Optional ByVal X2 As Integer, Optional ByVal Y2 As Integer, _
                                Optional ByVal XMove As Boolean, Optional ByVal move_x1 As Integer, Optional ByVal move_x2 As Integer, _
                                Optional ByVal move_y1 As Integer, Optional ByVal move_y2 As Integer, Optional ByVal YMove As Boolean, _
                                Optional ByVal spin_speedH As Single, Optional ByVal spin As Boolean, Optional grh_resize As Boolean, _
                                Optional grh_resizex As Integer, Optional grh_resizey As Integer)
                                
'*****************************************************************
'Author: Aaron Perkins
'Modified by: Ryan Cain (Onezero)
'Last Modify Date: 5/15/2003
'Makes a new particle effect
'Modified by Juan Martín Sotuyo Dodero
'*****************************************************************
    'Update array size
    If particle_group_index > particle_group_last Then
        particle_group_last = particle_group_index
        ReDim Preserve particle_group_list(1 To particle_group_last)
    End If
    particle_group_count = particle_group_count + 1
    
    'Make active
    particle_group_list(particle_group_index).ACTIVE = True
    
    'Map pos
    If (MAP_X <> -1) And (MAP_Y <> -1) Then
        particle_group_list(particle_group_index).MAP_X = MAP_X
        particle_group_list(particle_group_index).MAP_Y = MAP_Y
    End If
    
    'Grh list
    ReDim particle_group_list(particle_group_index).grh_index_list(1 To UBound(grh_index_list))
    particle_group_list(particle_group_index).grh_index_list() = grh_index_list()
    particle_group_list(particle_group_index).grh_index_count = UBound(grh_index_list)
    
    'Sets alive vars
    If alive_counter = -1 Then
        particle_group_list(particle_group_index).alive_counter = -1
        particle_group_list(particle_group_index).never_die = True
    Else
        particle_group_list(particle_group_index).alive_counter = alive_counter
        particle_group_list(particle_group_index).never_die = False
    End If
    
    'alpha blending
    particle_group_list(particle_group_index).alpha_blend = alpha_blend
    
    'stream type
    particle_group_list(particle_group_index).stream_type = stream_type
    
    'speed
    particle_group_list(particle_group_index).frame_speed = frame_speed
    
    particle_group_list(particle_group_index).X1 = X1
    particle_group_list(particle_group_index).Y1 = Y1
    particle_group_list(particle_group_index).X2 = X2
    particle_group_list(particle_group_index).Y2 = Y2
    particle_group_list(particle_group_index).angle = angle
    particle_group_list(particle_group_index).vecx1 = vecx1
    particle_group_list(particle_group_index).vecx2 = vecx2
    particle_group_list(particle_group_index).vecy1 = vecy1
    particle_group_list(particle_group_index).vecy2 = vecy2
    particle_group_list(particle_group_index).life1 = life1
    particle_group_list(particle_group_index).life2 = life2
    particle_group_list(particle_group_index).fric = fric
    particle_group_list(particle_group_index).spin = spin
    particle_group_list(particle_group_index).spin_speedL = spin_speedL
    particle_group_list(particle_group_index).spin_speedH = spin_speedH
    particle_group_list(particle_group_index).gravity = gravity
    particle_group_list(particle_group_index).grav_strength = grav_strength
    particle_group_list(particle_group_index).bounce_strength = bounce_strength
    particle_group_list(particle_group_index).XMove = XMove
    particle_group_list(particle_group_index).YMove = YMove
    particle_group_list(particle_group_index).move_x1 = move_x1
    particle_group_list(particle_group_index).move_x2 = move_x2
    particle_group_list(particle_group_index).move_y1 = move_y1
    particle_group_list(particle_group_index).move_y2 = move_y2
    
    particle_group_list(particle_group_index).rgb_list(0) = rgb_list(0)
    particle_group_list(particle_group_index).rgb_list(1) = rgb_list(1)
    particle_group_list(particle_group_index).rgb_list(2) = rgb_list(2)
    particle_group_list(particle_group_index).rgb_list(3) = rgb_list(3)
    
    particle_group_list(particle_group_index).grh_resize = grh_resize
    particle_group_list(particle_group_index).grh_resizex = grh_resizex
    particle_group_list(particle_group_index).grh_resizey = grh_resizey
    
    'handle
    particle_group_list(particle_group_index).ID = ID
    
    'create particle stream
    particle_group_list(particle_group_index).particle_count = particle_count
    ReDim particle_group_list(particle_group_index).particle_stream(1 To particle_count)
    
    'plot particle group on map
    If (MAP_X <> -1) And (MAP_Y <> -1) Then
        MapData(CurrentMap).Tile(MAP_X, MAP_Y).particle_group_index = particle_group_index
    End If
    
End Sub
Public Function Particle_Type_Get(ByVal particle_index As Long) As Long
'*****************************************************************
'Author: Juan Martín Sotuyo Dodero (juansotuyo@hotmail.com)
'Last Modify Date: 8/27/2003
'Returns the stream type of a particle stream
'*****************************************************************
    If Particle_Group_Check(particle_index) Then
        Particle_Type_Get = particle_group_list(particle_index).stream_type
    End If
End Function
Private Sub Particle_Group_Render(ByVal particle_group_index As Long, ByVal screen_x As Integer, ByVal screen_y As Integer)
'*****************************************************************
'Author: Aaron Perkins
'Modified by: Ryan Cain (Onezero)
'Modified by: Juan Martín Sotuyo Dodero
'Last Modify Date: 5/15/2003
'Renders a particle stream at a paticular screen point
'*****************************************************************
    Dim loopc As Long
    Dim temp_rgb(0 To 3) As Long
    Dim no_move As Boolean
    
    'Set colors
    temp_rgb(0) = particle_group_list(particle_group_index).rgb_list(0)
    temp_rgb(1) = particle_group_list(particle_group_index).rgb_list(1)
    temp_rgb(2) = particle_group_list(particle_group_index).rgb_list(2)
    temp_rgb(3) = particle_group_list(particle_group_index).rgb_list(3)
    
    If particle_group_list(particle_group_index).alive_counter Then
    
        'See if it is time to move a particle
        particle_group_list(particle_group_index).frame_counter = particle_group_list(particle_group_index).frame_counter + timerTicksPerFrame
        If particle_group_list(particle_group_index).frame_counter > particle_group_list(particle_group_index).frame_speed Then
            particle_group_list(particle_group_index).frame_counter = 0
            no_move = False
        Else
            no_move = True
        End If
        
    
    
        'If it's still alive render all the particles inside
        For loopc = 1 To particle_group_list(particle_group_index).particle_count
        
            'Render particle
            Particle_Render particle_group_list(particle_group_index).particle_stream(loopc), _
                            screen_x, screen_y, _
                            particle_group_list(particle_group_index).grh_index_list(Round(General_Random_Number(1, particle_group_list(particle_group_index).grh_index_count), 0)), _
                            temp_rgb(), _
                            particle_group_list(particle_group_index).alpha_blend, no_move, _
                            particle_group_list(particle_group_index).X1, particle_group_list(particle_group_index).Y1, particle_group_list(particle_group_index).angle, _
                            particle_group_list(particle_group_index).vecx1, particle_group_list(particle_group_index).vecx2, _
                            particle_group_list(particle_group_index).vecy1, particle_group_list(particle_group_index).vecy2, _
                            particle_group_list(particle_group_index).life1, particle_group_list(particle_group_index).life2, _
                            particle_group_list(particle_group_index).fric, particle_group_list(particle_group_index).spin_speedL, _
                            particle_group_list(particle_group_index).gravity, particle_group_list(particle_group_index).grav_strength, _
                            particle_group_list(particle_group_index).bounce_strength, particle_group_list(particle_group_index).X2, _
                            particle_group_list(particle_group_index).Y2, particle_group_list(particle_group_index).XMove, _
                            particle_group_list(particle_group_index).move_x1, particle_group_list(particle_group_index).move_x2, _
                            particle_group_list(particle_group_index).move_y1, particle_group_list(particle_group_index).move_y2, _
                            particle_group_list(particle_group_index).YMove, particle_group_list(particle_group_index).spin_speedH, _
                            particle_group_list(particle_group_index).spin, particle_group_list(particle_group_index).grh_resize, particle_group_list(particle_group_index).grh_resizex, particle_group_list(particle_group_index).grh_resizey
        
        Next loopc
        
        If no_move = False Then
            'Update the group alive counter
            If particle_group_list(particle_group_index).never_die = False Then
                particle_group_list(particle_group_index).alive_counter = particle_group_list(particle_group_index).alive_counter - 1
            End If
        End If
    
    Else
        'If it's dead destroy it
        particle_group_list(particle_group_index).particle_count = particle_group_list(particle_group_index).particle_count - 1
        If particle_group_list(particle_group_index).particle_count <= 0 Then Particle_Group_Destroy particle_group_index
    End If
End Sub

Private Sub Particle_Render(ByRef temp_particle As particle, ByVal screen_x As Integer, ByVal screen_y As Integer, _
                            ByVal grh_index As Long, ByRef rgb_list() As Long, _
                            Optional ByVal alpha_blend As Boolean, Optional ByVal no_move As Boolean, _
                            Optional ByVal X1 As Integer, Optional ByVal Y1 As Integer, Optional ByVal angle As Integer, _
                            Optional ByVal vecx1 As Integer, Optional ByVal vecx2 As Integer, _
                            Optional ByVal vecy1 As Integer, Optional ByVal vecy2 As Integer, _
                            Optional ByVal life1 As Integer, Optional ByVal life2 As Integer, _
                            Optional ByVal fric As Integer, Optional ByVal spin_speedL As Single, _
                            Optional ByVal gravity As Boolean, Optional grav_strength As Long, _
                            Optional ByVal bounce_strength As Long, Optional ByVal X2 As Integer, Optional ByVal Y2 As Integer, _
                            Optional ByVal XMove As Boolean, Optional ByVal move_x1 As Integer, Optional ByVal move_x2 As Integer, _
                            Optional ByVal move_y1 As Integer, Optional ByVal move_y2 As Integer, Optional ByVal YMove As Boolean, _
                            Optional ByVal spin_speedH As Single, Optional ByVal spin As Boolean, Optional grh_resize As Boolean, _
                            Optional grh_resizex As Integer, Optional grh_resizey As Integer)
'**************************************************************
'Author: Aaron Perkins
'Modified by: Ryan Cain (Onezero)
'Modified by: Juan Martín Sotuyo Dodero
'Last Modify Date: 5/15/2003
'**************************************************************
    If no_move = False Then
        If temp_particle.alive_counter = 0 Then
            'Start new particle
            InitGrh temp_particle.Grh, grh_index, alpha_blend
            temp_particle.X = RandomNumber(X1, X2) - 16
            temp_particle.Y = RandomNumber(Y1, Y2) - 16
            temp_particle.vector_x = RandomNumber(vecx1, vecx2)
            temp_particle.vector_y = RandomNumber(vecy1, vecy2)
            temp_particle.angle = angle
            temp_particle.alive_counter = RandomNumber(life1, life2)
            temp_particle.friction = fric
        Else
            'Continue old particle
            'Do gravity
            If gravity = True Then
                temp_particle.vector_y = temp_particle.vector_y + grav_strength
                If temp_particle.Y > 0 Then
                    'bounce
                    temp_particle.vector_y = bounce_strength
                End If
            End If
            'Do rotation
            If spin = True Then temp_particle.Grh.angle = temp_particle.Grh.angle + (RandomNumber(spin_speedL, spin_speedH) / 100)
            If temp_particle.angle >= 360 Then
                temp_particle.angle = 0
            End If
            
            If XMove = True Then temp_particle.vector_x = RandomNumber(move_x1, move_x2)
            If YMove = True Then temp_particle.vector_y = RandomNumber(move_y1, move_y2)
        End If
        
        'Add in vector
        temp_particle.X = temp_particle.X + (temp_particle.vector_x \ temp_particle.friction)
        temp_particle.Y = temp_particle.Y + (temp_particle.vector_y \ temp_particle.friction)
    
        'decrement counter
         temp_particle.alive_counter = temp_particle.alive_counter - 1
    End If
    'Draw it
    If grh_resize = True Then
        If temp_particle.Grh.grhindex Then
             Grh_Render_Advance temp_particle.Grh, temp_particle.X + screen_x, temp_particle.Y + screen_y, grh_resizex, grh_resizey, rgb_list(), True, True, alpha_blend
            Exit Sub
        End If
    End If

    If temp_particle.Grh.grhindex Then
        'Draw_Grh temp_particle.Grh, temp_particle.X + screen_x, temp_particle.Y + screen_y, True, True, Rgb_List(), alpha_blend, , , temp_particle.angle
        Grh_Render temp_particle.Grh, temp_particle.X + screen_x, temp_particle.Y + screen_y, rgb_list(), True, True, alpha_blend
    End If
End Sub
Private Sub Grh_Render(ByRef Grh As Grh, ByVal screen_x As Integer, ByVal screen_y As Integer, ByRef rgb_list() As Long, Optional ByVal h_centered As Boolean = True, Optional ByVal v_centered As Boolean = True, Optional ByVal alpha_blend As Boolean = False)
'**************************************************************
'Author: Aaron Perkins
'Last Modify Date: 2/28/2003
'Modified by Juan Martín Sotuyo Dodero
'Added centering
'**************************************************************
    Dim tile_width As Integer
    Dim tile_height As Integer
    Dim grh_index As Long
    
    If Grh.grhindex = 0 Then Exit Sub
        
    'Animation
    If Grh.Started Then
        Grh.FrameCounter = Grh.FrameCounter + (timerTicksPerFrame * Grh.Speed)
        If Grh.FrameCounter > GrhData(Grh.grhindex).NumFrames Then
            'If Grh.noloop Then
            '    Grh.FrameCounter = GrhData(Grh.GrhIndex).NumFrames
            'Else
                Grh.FrameCounter = 1
            'End If
        End If
    End If

        'particle_group_list(particle_group_index).frame_counter = particle_group_list(particle_group_index).frame_counter + timer_ticks_per_frame
        'If particle_group_list(particle_group_index).frame_counter > particle_group_list(particle_group_index).frame_speed Then
        '    particle_group_list(particle_group_index).frame_counter = 0
        '    no_move = False
        'Else
        '    no_move = True
        'End If

    'Figure out what frame to draw (always 1 if not animated)
    If Grh.FrameCounter = 0 Then Grh.FrameCounter = 1
    'If Not Grh_Check(Grh.grhindex) Then Exit Sub
    grh_index = GrhData(Grh.grhindex).Frames(Grh.FrameCounter)
    If grh_index <= 0 Then Exit Sub
    If GrhData(grh_index).FileNum = 0 Then Exit Sub
        
    'Modified by Augusto José Rando
    'Simplier function - according to basic ORE engine
    If h_centered Then
        If GrhData(Grh.grhindex).TileWidth <> 1 Then
            screen_x = screen_x - Int(GrhData(Grh.grhindex).TileWidth * (32 \ 2)) + 32 \ 2
        End If
    End If
    
    If v_centered Then
        If GrhData(Grh.grhindex).TileHeight <> 1 Then
            screen_y = screen_y - Int(GrhData(Grh.grhindex).TileHeight * 32) + 32
        End If
    End If
    
    'Draw it to device
    Device_Box_Textured_Render grh_index, _
        screen_x, screen_y, _
        GrhData(grh_index).pixelWidth, GrhData(grh_index).pixelHeight, _
        rgb_list(), _
        GrhData(grh_index).sX, GrhData(grh_index).sY, _
        alpha_blend ', _
        Grh.angle

End Sub
Private Sub Grh_Render_Advance(ByRef Grh As Grh, ByVal screen_x As Integer, ByVal screen_y As Integer, ByVal Height As Integer, ByVal Width As Integer, ByRef rgb_list() As Long, Optional ByVal h_center As Boolean, Optional ByVal v_center As Boolean, Optional ByVal alpha_blend As Boolean = False)
'**************************************************************
'Author: Juan Martín Sotuyo Dodero (juansotuyo@hotmail.com)
'Last Modify Date: 11/19/2003
'Similar to Grh_Render, but let´s you resize the Grh
'**************************************************************
    Dim tile_width As Integer
    Dim tile_height As Integer
    Dim grh_index As Long
    
    'Animation
    If Grh.Started Then
        Grh.FrameCounter = Grh.FrameCounter + (timerTicksPerFrame * Grh.Speed)
        If Grh.FrameCounter > GrhData(Grh.grhindex).NumFrames Then
            'If Grh.noloop Then
            '    Grh.FrameCounter = GrhData(Grh.GrhIndex).NumFrames
            'Else
                Grh.FrameCounter = 1
            'End If
        End If
    End If
    
    'Figure out what frame to draw (always 1 if not animated)
    If Grh.FrameCounter = 0 Then Grh.FrameCounter = 1
    grh_index = GrhData(Grh.grhindex).Frames(Grh.FrameCounter)
    
    'Center Grh over X, Y pos
    If GrhData(Grh.grhindex).TileWidth <> 1 Then
        screen_x = screen_x - Int(GrhData(Grh.grhindex).TileWidth * (32 \ 2)) + 32 \ 2
    End If
    
    If GrhData(Grh.grhindex).TileHeight <> 1 Then
        screen_y = screen_y - Int(GrhData(Grh.grhindex).TileHeight * 32) + 32
    End If
    
    'Draw it to device
    Device_Box_Textured_Render_Advance grh_index, _
        screen_x, screen_y, _
        GrhData(grh_index).pixelWidth, GrhData(grh_index).pixelHeight, _
        rgb_list, _
        GrhData(grh_index).sX, GrhData(grh_index).sY, _
        Width, Height, alpha_blend ', grh.angle
End Sub
Private Function Particle_Group_Next_Open() As Long
'*****************************************************************
'Author: Aaron Perkins
'Last Modify Date: 10/07/2002
'
'*****************************************************************
On Error GoTo ErrorHandler:
    Dim loopc As Long
    
    loopc = 1
    Do Until particle_group_list(loopc).ACTIVE = False
        If loopc = particle_group_last Then
            Particle_Group_Next_Open = particle_group_last + 1
            Exit Function
        End If
        loopc = loopc + 1
    Loop
    
    Particle_Group_Next_Open = loopc
Exit Function
ErrorHandler:
    Particle_Group_Next_Open = 1
End Function

Private Function Particle_Group_Check(ByVal particle_group_index As Long) As Boolean
'**************************************************************
'Author: Aaron Perkins
'Last Modify Date: 1/04/2003
'
'**************************************************************
    'check index
    If particle_group_index > 0 And particle_group_index <= particle_group_last Then
        If particle_group_list(particle_group_index).ACTIVE Then
            Particle_Group_Check = True
        End If
    End If
End Function
Public Function Map_Particle_Group_Get(ByVal MAP_X As Integer, ByVal MAP_Y As Integer) As Long
    If InMapBounds(MAP_X, MAP_Y) Then
        Map_Particle_Group_Get = MapData(CurrentMap).Tile(MAP_X, MAP_Y).particle_group_index
    Else
        Map_Particle_Group_Get = 0
    End If
End Function
Private Function Char_Check(ByVal char_index As Integer) As Boolean
    'check char_index
    If char_index > 0 And char_index <= LastChar Then
        Char_Check = (charlist(char_index).Heading > 0)
    End If
End Function
Public Sub RenderToPicture()
'**************************************************************
'Author: Aaron Perkins
'Last Modify Date: 8/14/2007
'Last modified by: Juan Martín Sotuyo Dodero (Maraxus)
'Renders everything to the viewport
'**************************************************************
   
    Dim Y                   As Integer     'Keeps track of where on map we are
    Dim X                   As Integer     'Keeps track of where on map we are
    Dim screenminY          As Integer  'Start Y pos on current screen
    Dim screenmaxY          As Integer  'End Y pos on current screen
    Dim screenminX          As Integer  'Start X pos on current screen
    Dim screenmaxX          As Integer  'End X pos on current screen
    Dim minY                As Integer  'Start Y pos on current map
    Dim maxY                As Integer  'End Y pos on current map
    Dim minX                As Integer  'Start X pos on current map
    Dim maxX                As Integer  'End X pos on current map
    Dim ScreenX             As Integer  'Keeps track of where to place tile on screen
    Dim ScreenY             As Integer  'Keeps track of where to place tile on screen
    Dim minXOffset          As Integer
    Dim minYOffset          As Integer
    Dim PixelOffsetXTemp    As Integer 'For centering grhs
    Dim PixelOffsetYTemp    As Integer 'For centering grhs
    Dim CurrentGrhIndex     As Integer
    Dim OffX                As Integer
    Dim OffY                As Integer

    frmRenderer.Show
    
    Dim destRect As RECT
    
    destRect.Bottom = frmRenderer.Picture1.ScaleHeight
    destRect.Right = frmRenderer.Picture1.ScaleWidth
    destRect.Left = 0
    destRect.Top = 0
    
    D3DDevice.BeginScene
    D3DDevice.Clear 0, ByVal 0, D3DCLEAR_TARGET, 0, 1#, 0

    GenerarVista
    
    'Draw floor layer
    For Y = 1 To 100
        frmRenderer.Caption = "Renderizando Primera y Segunda Capa... " & Y & "%"
        For X = 1 To 100
            'Layer 1 **********************************
            If InMapBounds(X, Y) Then
                If MapData(CurrentMap).Tile(X, Y).Graphic(1).grhindex And VerCapa1 Then
                    Call Draw_Grh(MapData(CurrentMap).Tile(X, Y).Graphic(1), _
                            (ScreenX - 1) * 32, _
                            (ScreenY - 1) * 32, _
                            0, 1, , X, Y)
                End If
                
                If MapData(CurrentMap).Tile(X, Y).Graphic(2).grhindex <> 0 And VerCapa2 Then
                    Call Draw_Grh(MapData(CurrentMap).Tile(X, Y).Graphic(2), (ScreenX - 1) * 32, (ScreenY - 1) * 32, 1, 1, , X, Y)
                End If
            End If
            '******************************************
            ScreenX = ScreenX + 1
        Next X

        'Reset ScreenX to original value and increment ScreenY
        ScreenY = ScreenY + 1
    Next Y
    
    For Y = 1 To 100
        frmRenderer.Caption = "Renderizando Tercer capa,objetos y NPCs... " & Y & "%"
        For X = 1 To 100
            If InMapBounds(X, Y) Then
                PixelOffsetXTemp = ScreenX * 32
                PixelOffsetYTemp = ScreenY * 32
                With MapData(CurrentMap).Tile(X, Y)
                    '******************************************
    
                    'Object Layer **********************************
                    If .ObjGrh.grhindex <> 0 And VerObjetos Then
                        Call Draw_Grh(.ObjGrh, _
                                PixelOffsetXTemp, PixelOffsetYTemp, 1, 1, , X, Y)
                    End If
                    
                    'Char layer ************************************
                    If .CharIndex <> 0 And VerNpcs Then
                        Call Char_Render(.CharIndex, PixelOffsetXTemp, PixelOffsetYTemp, X, Y)
                    End If
                    '*************************************************
       
                    'Layer 3 *****************************************
                    If .Graphic(3).grhindex <> 0 And VerCapa3 Then
                        Call Draw_Grh(.Graphic(3), _
                                PixelOffsetXTemp, PixelOffsetYTemp, 1, 1, , X, Y)
                    End If
                    '************************************************
    
                End With
            End If
            ScreenX = ScreenX + 1
        Next X
        ScreenY = ScreenY + 1
    Next Y
    
Dim Grh As Grh

For Y = 1 To 100
    frmRenderer.Caption = "Renderizando Particulas... " & Y & "%"
    For X = 1 To 100
        If MapData(CurrentMap).Tile(X, Y).particle_group_index Then
            Particle_Group_Render MapData(CurrentMap).Tile(X, Y).particle_group_index, ScreenX * 32, ScreenY * 32    '+ (16)
        End If
    ScreenX = ScreenX + 1
    Next X
ScreenY = ScreenY + 1
Next Y
    
'Draw blocked tiles and grid
For Y = 1 To 100
    frmRenderer.Caption = "Renderizando Recursos y Cuarta Capa... " & Y & "%"
    For X = 1 To 100
    
        'Layer 4 **********************************
        If MapData(CurrentMap).Tile(X, Y).Graphic(4).grhindex And ((VerCapa4 And Not bTecho) Or Grabar) Then
            Call Draw_Grh(MapData(CurrentMap).Tile(X, Y).Graphic(4), _
                ScreenX * 32, _
                ScreenY * 32, _
                1, 1, , X, Y)
        End If
        '**********************************
        If MapData(CurrentMap).Tile(X, Y).TileExit.Map <> 0 And VerTranslados Then
            Grh.grhindex = 3
            Grh.FrameCounter = 1
            Grh.Started = 0
            Call Draw_Grh(Grh, _
                ScreenX * 32, _
                ScreenY * 32, _
                1, 1, , X, Y)
        End If
        
        'Show blocked tiles
        If VerBlockeados And MapData(CurrentMap).Tile(X, Y).Blocked = 1 And Not Grabar Then
            Grh.grhindex = 4
            Grh.FrameCounter = 1
            Grh.Started = 0
            Call Draw_Grh(Grh, _
                ScreenX * 32, _
                ScreenY * 32, _
                1, 1, , X, Y)
        End If
            
        If VerGrilla And Not Grabar Then
            ' Grilla 24/11/2008 by GS
            Call Draw_Grh(Grh, _
                ScreenX * 32, _
                ScreenY * 32, _
                1, 1, , X, Y)
        End If
            
        If VerTriggers And Not Grabar Then '4978
            If MapData(CurrentMap).Tile(X, Y).Trigger > 0 Then _
                Text_Render font_list(1), MapData(CurrentMap).Tile(X, Y).Trigger, ScreenY * 32, ScreenX * 32, 9, 12, &HFFFFFFFF, DT_CENTER
        End If
        
        ScreenX = ScreenX + 1
    Next X
    ScreenY = ScreenY + 1
Next Y

    D3DDevice.EndScene
    D3DDevice.Present destRect, ByVal 0, frmRenderer.Picture1.hWnd, ByVal 0
    
    Call SavePicture(frmRenderer.Picture1.Image, App.Path & "\Mapa1.bmp")
    
End Sub
